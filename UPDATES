--------------------------------------------
Developers
--------------------------------------------
JDK = Josh Dan Kemppainen (jdkemppa@mtu.edu)
TKW = Trevor K. Wavrunek (tkwavrun@mtu.edu)


-------------------------------------------------------------------------------------------------------------
Notes for formatting this file
-------------------------------------------------------------------------------------------------------------
- Only spaces will be used to create whitespace (i.e. no tabs)
- The maximum length of each line should be limited to 110 column (i.e. no text should be placed beyound 110)
- Sections of file will be identified by placing header type info between two horizontal lines
- Two empty lines should be placed between sections


-------------------------------------------------------------------------------------------------------------
LUNAR (version 7July2025)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
7July2025          JDK & TKW   - GUI file dialog: All GUIs file dialog boxes now have "memory" of where you
                                                  during the "last LUNAR session"

7July2025          JDK & TKW   - GUI font settings and size: All GUIs now have easier control of default font
                                                             size based on LUNAR/src/GUI_scale_settings.py
                                                             file. Additionally settings for screen size can
                                                             be setup in this file.

7July2025          JDK         - ERROR handling: All ERRORs raised now ensures LUNAR shuts down properly and
                                                 in the proper directory.
												 
7July2025          JDK         - sheet_builder.py: Can now cutoff shapes with the "cutter" stack to generate
                                                   quantum dots.
												 
7July2025          JDK         - sheet_builder.py: Can now "graft" fragments of molecules from other files
                                                   to the surface of sheets or CNTs.

13June2025         JDK         - bond_react_merge.py: Fixed of bug for when trying to merge class2 systems, 
                                                      which only models pair potentials (and not bonded 
                                                      potentials) - code was not writing correct datafiles
                                                      by leaving out the crossterms in such cases.

6June2025          JDK        - log_analysis.py: Starting working on allows the RFR stress-strain
                                                 implementation to be compatibile with stress-strain curves
                                                 for liquid systems.

19May2025          JDK        - log_analysis.py: Adjusted how the "shift" keyword of some methods are output
                                                 in the ".outputs" attribute of the class. In addition added
                                                 "EXAMPLES/log_analysis_scripting" folder to show how to 
                                                 script with log_analysis.

16May2025          JDK        - lmp2SYBYLmol2.py: Added a flag to generate a "pseudo simulation cell" in the 
                                                  written .mol2 file, by using atoms as box corners and bonds
                                                  as box edges. This is meant for allowing for a simulation 
                                                  cell to be visualized in VMD, as VMD does not support this.
												  
16May2025          JDK        - all2lmp.py: Added the "nva" (a.k.a. normal vector alignment) option to the 
                                            rotation options of all2lmp, to align planar molecules "onto"
                                            a principal plane.											
								  

-------------------------------------------------------------------------------------------------------------
LUNAR (version 14April2025)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
14April2025         JDK        - add_pi_electrons.py, all2lmp.py, atom_typing.py, auto_morse_bond_update.py:
                                  Adjusted command line overrides to be called before the array processing
                                  recursion.

14April2025         JDK        - cluster_analysis.py and auto_cluster_analysis.py: 
                                   Added the ability to find if the molecule spans the entire simulation cell.
                                   The goal being to help develop a new method for computing gel point of
                                   polymers.
                                                  

4April2025         JDK         - log_analysis.py: Added a FFT / inverse FFT low pass filter for testing 
                                                  different filtering methods.

2April2025         JDK         - log_analysis.py: Added cite-cite-cite... sections for Patrone and Kemppainen
                                                  et al. analysis methods to written logfile from 
												  https://doi.org/10.1016/j.polymer.2016.01.074 and 
                                                  https://doi.org/10.26434/chemrxiv-2025-fk935 respectively. 
                                                  In addition that tangent intersection was implemented in the
                                                  hyperbola method.

1April2025         JDK         - auto_morse_bond.py: Adding the code to allow for ClassII potential to be
                                                     reparamterized into the ClassII-xe potenial. In addition
                                                     The LAMMPS potentials where added to the:
                                                       LUNAR/LAMMPS/CLASS2 
                                                     directory, with guidance on how to compile and call the
                                                     classII-xe potential from a LAMMPS script.

31March2025        JDK         - log_analysis.py: Added the Regression Fringe Response stress-strain analysis
                                                  module. Along with added further compute options and 
                                                  documentation.

28March2025        JDK         - atom_typing.py: Adjusted PCFF and PCFF-IFF atom typing for arginine.

28March2025        JDK         - bond_react_merge.py: Adjusted the auto-gen-map file option to include further
                                                      constraints.

19March2025        JDK         - sheet_builder.py and atom_typing.py: Improved the time to find bonds via
                                                                      distance cut-off.

6March2025         JDK         - atom_typing.py: The fused ring analysis use to have O(n^2) time complexity
                                                 with n being the number of rings in the system. This has been
                                                 cleaned up to O(n) time complexity.
												 
6March2025         JDK         - atom_typing_log_processor.py: Added a bit more documentation via the "Quick help"
                                                               page on the GUI.
												 
24February2025     JDK         - add_pi_electrons.py: Rewrote parts of the code to allow for adding pi-electrons
                                                      when atomIDs are non-contiguous in the read in LAMMPS 
                                                      datafile.

20February2025     JDK         - atom_typing_log_processor.py: Adding a new module that is meant to bulk process
                                                               the logfiles that atom_typing.py generates. This
                                                               is mainly meant to allow for topological analysis
                                                               of ReaxFF simulaitons.

20February2025     JDK         - all2lmp.py: Fixed a bug related the minimally used nta "remove_things" option
                                             that only effected class2 FF implementation.


-------------------------------------------------------------------------------------------------------------
LUNAR (version 20February2025)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
17February2025     JDK          - atom_typing.py,
                                  all2lmp.py,
                                  free_volume.py,
                                  add_pi_electrons.py,
                                  log_analysis.py,
                                  auto_morse_bond_update.py: Have implemeted "array procesing" via the Python
                                                             glob library. Where Unix path expansion rules allow
                                                             for mulitple files to be matched based in a single
                                                             input string supplied to the topofile or logfile
                                                             entry. For example a string like:
                                                               "**EXAMPLES/array_processing/*.data"
                                                             will find all files with the .data extension in a
                                                             directory called EXAMPLES/array_processing/. The files
                                                             are then iterated through by recursively calling each
                                                             modules main() function.

14February2025     JDK          - cell_builder.py: Limited the scope of what eval() does in src/cell_builder/
                                                   misc_functions.py get_dict(), to be safe no matter what is 
                                                   provided in the header of an input LAMMPS datafile.

19December2024    JDK           - Every module: Updated log defaults in each main() function to allow for the
                                                the ability to for loop through "the main()" function without
                                                the need to clear the log between iterations.

16December2024    JDK           - all2lmp.py: Incorporated r0's and theta0's parameterization from "assumed"
                                              and "assumed_auto_fill" into crossterm r0's and theta0's. Prior
                                              to this if an r0 and theta0 from "assumed" and "assumed_auto_fill"
                                              where filled into either a bond or angle, these parameters where
                                              not being used in the crossterm. This is meant to help conversions
                                              from ReaxFF to force fields like PCFF and COMPASS.

13November2024    JDK           - all2lmp.py: Adjusted the "ff_class" variable from taking both string and int
                                              types to only taking string types (i.e. for class2 force fields
                                              ff_class will now be ff_class = '2' instead of ff_class = 2). 
                                              This was done to help with consistency of types, such that all
                                              ff_class options are now strings. The code is still backwards 
                                              compatibile for using int's, but is recommended to use strings
                                              for all ff_class options.

2November2024    JDK            - bond_react_merge.py: Added a WARNING check for if the net charge differs from
                                                       the pre-reaction template to the post-reaction template.
                                                       Majority of the time the net charge should be the same,
                                                       where there are only rare cases they will be different.
                                                       Thus this check was set as a WARNING.

2November2024    JDK            - all2lmp.py: Adjusted the read_nta.py methods to allow for users to add spaces
                                              whereever they like "within" each section. This will help users
                                              setup a file that is more "readable" to them and their tastes.

-------------------------------------------------------------------------------------------------------------
LUNAR (version 23October2024)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
23October2024      JDK         - sheet_builder.py: Adjusted functional_atoms, to properly add epoxide type of
                                                   functional groups to periodically bonded sheets. Prior version
                                                   would have possibly added the second bond to close the ring
                                                   to span the entire simulation cell due to periodicity.
                                                   Additionally an example was added to the "Quick help" page 
                                                   accessible from the GUI, to show how to trick sheet_builder to
                                                   be able to add different types functional groups to the same
                                                   bonding atoms. This trick is summarized as:
												     types = {1: 'C:1', 2: 'C:2', 3: 'C:3', 4: 'C:4'}
                                                     functional_atoms = 'C:1<40>|O|; C:2<20>|O|H; C:3<20>|N; C:4<20>|S'

17October2024      JDK         - cell_builder.py: Allowed scientific notation (i.e. instead of giving an input 
                                                  of 1000, users can now input 1e3) to be used in GUI for 
                                                  duplicate and maxtry entries.

17October2024      JDK         - cell_builder.py: Fixed in generated LAMMPS script to read generated LAMMPS
                                                  data file name.
													
16October2024      JDK         - .mol2 file reader: Fixed issues for weird .mol2 files that are generated via
                                                    Materials Studio.

8October2024       JDK         - bond_react_merge.py: Adjust a warning message for generate_map_file option.
										  
4October2024       JDK         - Format of this "UPDATE" file was revised to be "order" top-to-bottom, where
                                 the top is the most recent updates and the bottom is the oldest updates.
								 
4October2024       JDK         - all2lmp.py: Added a new ff_class "ilmp" for interatomic potentials like ReaxFF, REBO,
                                          ... but for when the topofile is a LAMMPS datafile. These potentials where
                                          previously supported with the "i" ff_class and still can be. However if the
                                          input is a LAMMPS datafile, the "i" class resets atomTypeIDs. The "ilmp"
                                          ff_class can now be used for when the topofile is a LAMMPS datafile where
                                          the existing atomTypeIDs are maintatined between inputs and outputs.
										  
4October2024       JDK         - cell_builder.py: Added a new ability to assign all atoms in the generated system
                                                  to a single molID. This can be useful for generating different
                                                  "sub systems" with cell_builder and then "assembled" in LAMMPS
                                                  if the end goal is easy grouping of the "sub systems".


-------------------------------------------------------------------------------------------------------------
LUNAR (version 21September2024)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
21September2024    JDK         - sheet_builder.py: Added the ability to terminated "edge atoms" on generated
                                                   sheets or tubes, if they are not periodically bonded and
                                                   also added the ability to functionalize sheets or tubes based
                                                   and monte carlo methods and max functionalization percentages.
												   
16September2024    JDK         - frc_files/Morse_parameters.txt: Added a few more bond typing rules.

16September2024    JDK         - bond_react_merge.py: Corrected a few warning and error check messages.


					   
-------------------------------------------------------------------------------------------------------------
LUNAR (version 18August2024)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
18August2024       JDK         - log_analysis.py:
                                    * Removed the "X-scale" and Y-scale" entries.
                                    * Added "X-compute" and "Y-compute" entries to perform vectorized
                                      computes using LAMMPS style of accessing variables by wrapping
                                      column names between "${" and "}" characters (i.e. ${Step}/1000).
                                      The vectorized math operations follow python syntax, which is
                                      detailed in the "compute help" popup page on the GUI.
                                    * Added a butterworth filter that will apply to the LAMMPS thermo
                                      data, but all "methods" will still only apply to the LAMMPS thermo
                                      data. This could be useful for "seeing" trends in noisy data.
                                    * Added "LAMMPS data (apply moving average)" and "LAMMPS data (apply
                                      butterworth filter)" to methods to allow for cleaning of LAMMPS
                                      thermo data using moving average or butterworth filter, where any
                                      other analysis method's will then "operate" on the cleaned LAMMPS
                                      thermo data.
                                    * Adjusted cursor to allow either x or y or x;y pairing, where if only
                                      x is specifed a vertical line will be plotted, if only y is specifed
                                      a horizontal line will be plotted and if both x and y are supplied
                                      a data point will be plotted.	

12August2024       JDK         - atom_typing.py: Fixed npc atom typing for PCFF and PCFF-IFF force fields.
					
5August2024        JDK         - log_analysis.py: Fixed "Remove LAMMPS data" method as it was not removing
                                                  the LAMMPS raw data from the plot.

2August2024        JDK         - read_lmp.py: Commented out a print() statement that was meant for debugging.

2August2024        JDK         - all2lmp.py: Updated message about missing parameters to provide better
                                             guidance on missing parameters.
											 
1August2024        JDK         - auto_free_volume.py: Added log reset between file processing to stop 
                                                      "appending" behavior of log files for different
                                                      datafile analysis.
													  
30July2024         JDK         - sheet_builder.py: Added try except to command line manual for "base unit"
                                                   representation as the "newline" character might cause
                                                   a failure.	
												   
30July2024         JDK         - all2lmp.py: Fixed compatibility bug for atomtype:NAME option for
                                             nta_file = 'types_from_pdb.nta', to use types/atomtype:NAME
                                             from .pdb atom-name column.

29July2024         JDK         - log_analysis.py: Turned read_data.py/get_data() into a method inside of 
                                                  file class, to make for shorter hand personal use. Updated
                                                  files in LUNAR/EXAMPLES/log_analysis/using read_log.py for
                                                  personal use directory.
				
28July2024         JDK         - src/write_lmp.py: Correct Bondbond vs Bondangle style hint (Wouldnt cause)
                                                   any issues, but was inconsistent for those reading that
                                                   file.
												   
												   
-------------------------------------------------------------------------------------------------------------
LUNAR (version 28July2024)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
26July2024         JDK         - sheet_builder.py: Fixed typo in "GUI Quick help page".

22July2024         JDK         - bond_react_merge.py: Fixed typo for map file generation of WARNING, for
                                                      DeleteID auto-detection.	
													  
19July2024         JDK         - atom_typing.py auto_morse_bond_update.py: Increased efficiency of the ring
                                                                           analysis path finding code as it
                                                                           proved to be slow for MXenes.
																		   
17July2024         JDK         - auto_morse_bond_update.py:	Added F-* bonding parameters in
                                                            frc_files/Morse_parameters.txt.
															
7July2024          JDK         - auto_morse_bond_update.py:	Added H-* bonding parameters in
                                                            frc_files/Morse_parameters.txt and cleaned up the
                                                            format.		
															
7July2024          JDK         - bond_react_merge.py: Added an additional sort to bond coeffs to mitigate the
                                                      number of permuations to arise. This elimanates order
                                                      inputs vs outputs coupling.	
													  
3July2024          JDK         - cell_builder.py: For the "random" method, the compute density pop-up in the
                                                  GUI was added onto, to allow for the insertion of the cell
                                                  dimensions to the "domain" entry via the click of a button.

3July2024          JDK         - README.md: Generated a YouTube channel for LUNAR and added the "Additional
                                            resources" to README.md.	

2July2024          JDK         - bond_react_merge.py and cell_builder.py with force_field_joining = 'merge':
                                 Fixed the issue of writing crossterms with ZERO's for class1 FFs, that dont
                                 have crossterm interations, such as the non-crossterm version of CVFF, OLSA,
                                 DREIDING, etc.


-------------------------------------------------------------------------------------------------------------
LUNAR (version 30June2024)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
30June2024         JDK         - cell_builder.py: Made compatible with ReaxFF datafiles or other "interatomic"
                                                  potential types of LAMMPS datafiles.	
												  
29June2024         JDK         - bond_react_merge.py: Fixed "-wrd" command line override shortcut flag.	

27June2024         JDK         - LUNAR.py: LUNAR manuscript was published so updated README.md and citation
                                           page in LUNAR.py GUI.		

27June2024         JDK         - src/read_lmp.py: Bug fix for when reading a LAMMPS datafile with an "empty
                                                  section", for example an "Improper Coeffs" section that
                                                  no improper coeffs are supplied.	

27June2024         JDK         - bond_react_merge.py: Updated the "in.fix_bond_react.script" that is written
                                                      each time the code is run to include a more scalable
                                                      example of how to write LAMMPS datafiles out in
                                                      increments of conversion.		
													  
26June2024         JDK         - atom_typing.py and all2lmp.py: Updated mol2lmp.py to be able to read .mol
                                                                files in V2000 or V3000 format.	

26June2024         JDK         - atom_typing.py: Adjusted velocity transfer bug.

18June2024         JDK         - LUNAR.py: Made LUNAR.py compatible with the new cell_builder.py.

18June2024         JDK         - atom_typing.py: Corrected a typo in the "Quick help" page.	


-------------------------------------------------------------------------------------------------------------
LUNAR (version 17June2024)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
17June2024         JDK         - cell_builder.py: Increased the efficiency of the "random" packing method.
                                                  the new efficiency was tested by generating 32,175 atom EPON
                                                  862 systems with fully-periodic boundaries and a tolerance
                                                  of 2.0 angstrom:
                                                      *Packed to: 0.10 gm/cm^3 in 3 seconds
                                                      *Packed to: 0.20 gm/cm^3 in 2 seconds
                                                      *Packed to: 0.30 gm/cm^3 in 2 seconds
                                                      *Packed to: 0.40 gm/cm^3 in 4 seconds
                                                      *Packed to: 0.50 gm/cm^3 in 10 seconds
                                                      *Packed to: 0.60 gm/cm^3 in 1 minute and 17 seconds
                                                      *Packed to: 0.70 gm/cm^3 in 22 minutes and 36 seconds
                                                  and by generating 32,175 atom EPON 862 systems with non
                                                  -periodic boundaries and a tolerance of 2.0 angstrom:
                                                      *Packed to: 0.10 gm/cm^3 in 3 seconds
                                                      *Packed to: 0.20 gm/cm^3 in 2 seconds
                                                      *Packed to: 0.30 gm/cm^3 in 2 seconds
                                                      *Packed to: 0.40 gm/cm^3 in 5 seconds
                                                      *Packed to: 0.50 gm/cm^3 in 28 seconds
                                                      *Packed to: 0.60 gm/cm^3 in 6 minute and 16 seconds	

17June2024         JDK         - sheet_builder.py: Increased the efficiency for finding bonds (used some
                                                   of the tricks found while optimizing the cell_builder 
                                                   "random" method).
												   
16June2024         JDK         - cell_builder.py: Increased the efficiency of the "random" packing method.
                                                  the new efficiency was tested by generating 32,175 atom EPON
                                                  862 systems with fully-periodic boundaries and a tolerance
                                                  of 2.0 angstrom:
                                                      *Packed to: 0.10 gm/cm^3 in 3 seconds
                                                      *Packed to: 0.20 gm/cm^3 in 3 seconds
                                                      *Packed to: 0.30 gm/cm^3 in 3 seconds
                                                      *Packed to: 0.40 gm/cm^3 in 8 seconds
                                                      *Packed to: 0.50 gm/cm^3 in 48 seconds
                                                      *Packed to: 0.57 gm/cm^3 in 9 minutes and 45 seconds
                                                  and by generating 32,175 atom EPON 862 systems with non
                                                  -periodic boundaries and a tolerance of 2.0 angstrom:
                                                      *Packed to: 0.10 gm/cm^3 in 2 seconds
                                                      *Packed to: 0.20 gm/cm^3 in 2 seconds
                                                      *Packed to: 0.30 gm/cm^3 in 4 seconds
                                                      *Packed to: 0.40 gm/cm^3 in 18 seconds
                                                      *Packed to: 0.50 gm/cm^3 in 4 minutes and 49 seconds	
													  
15June2024         JDK         - cell_builder.py: Created a new method which is loosley termed "random",
                                                  which tries to randomly insert and rotates molecules. 
                                                  Overlaping atoms are checked based on a tolerance or via
                                                  LJ sigma parameters which can be mixed with arithmetic or
                                                  geometric or sixthpower rules. If atoms overlap, the 
                                                  molecule will attempt to be inserted again. Users control
                                                  the maximum number of attempts to insert the molecule. The
                                                  efficiency was tested by generating 32,175 atom EPON 862
                                                  systems with fully-periodic boundaries and a tolerance of
                                                  2.0 angstrom:
                                                      *Packed to: 0.10 gm/cm^3 in 4 seconds
                                                      *Packed to: 0.20 gm/cm^3 in 8 seconds
                                                      *Packed to: 0.30 gm/cm^3 in 22 seconds
                                                      *Packed to: 0.40 gm/cm^3 in 24 seconds
                                                      *Packed to: 0.50 gm/cm^3 in 2 minutes and 48 seconds
                                                      *Packed to: 0.57 gm/cm^3 in 25 minutes and 40 seconds
                                                  and by generating 32,175 atom EPON 862 systems with non
                                                  -periodic boundaries and a tolerance of 2.0 angstrom:
                                                      *Packed to: 0.10 gm/cm^3 in 4 seconds
                                                      *Packed to: 0.20 gm/cm^3 in 7 seconds
                                                      *Packed to: 0.30 gm/cm^3 in 25 seconds
                                                      *Packed to: 0.40 gm/cm^3 in 52 seconds
                                                      *Packed to: 0.50 gm/cm^3 in 11 minutes and 18 seconds	
                                                  Currently, the manual found in the docs/ directory is not
                                                  updated with these new options, but the "Quick help" guide,
                                                  the IDE comments, and the commandline manual (accessible
                                                  by python3 cell_builder.py -man) are updated.	
												  
6June2024          JDK         - log_analysis.py: Updated that when xlo column in analysis is empty, the 
                                                  minimum xdata is now used and if the xhi column in analysis
                                                  is empty the maximum of xdata is used.
												  
5June2024          JDK         - all2lmp.py: Swithed ff_class 'r' for ReaxFF, to 'i' for interatomic as this
                                             method in all2lmp will allow for the generation of data files 
                                             for interatomic potentials like: ReaxFF, REBO, AIREBO, SNAP, ...
                                             Where SNAP is a machine learned potential.	
											 
4June2024          JDK         - sheet_builder.py: NEW module to generate sheet(s), chiral-tubes, and
                                                   symmetric-multi-wall tubes of sp2 hybridized atoms
                                                   like carbon, nitrogen, boron, .... The module supports
                                                   IFF's virtual pi-electrons for graphene/graphite and boron
                                                   -nitride.

4June2024          JDK         - atom_typing.py: Updated general atom types to use the ':' character instead of
                                                 the ';' character to go between QTY and general string.	

3June2024          JDK         - all2lmp.py: Added 3-wildcard flag to remove_things.py to allow the ability
                                             to remove any dihedral interactions for IFF's pi-electrons.			


-------------------------------------------------------------------------------------------------------------
LUNAR (version 30May2024)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
30May2024          JDK         - Updated manual figures of GUIs to inlcude the "Quick help" buttons.

23May2024          JDK         - Updated "Quick help" pages	

20May2024          JDK         - GUIs: Brought back threading to have GUI run on a seperate thread from the 
                                       main() functions. The threading is also compatible with traceback logs.	
									   
21May2024          JDK         - bond_react_merge_prep.py GUI: Added "Quick help" page	
                   JDK         - add_pi_electrons.py GUI: Added "Quick help" page	
                   JDK         - cluster_analysis.py GUI: Added "Quick help" page
                   JDK         - auto_cluster_analysis.py GUI: Added "Quick help" page	
                   JDK         - lmp2SYBYLmol2.py GUI: Added "Quick help" page	
                   JDK         - atom_removal.py GUI: Added "Quick help" page		
                   JDK         - free_volume.py GUI: Added "Quick help" page
                   JDK         - Added atom_typing.py tests to "automatic_tests" directory	

18May2024          JDK         - atom_typing.py: Added command line over rides for bond finding options.

-------------------------------------------------------------------------------------------------------------
LUNAR (version 16May2024)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
16May2024          JDK         - add_pi_electrons.py: Pi-electron now inherits velocity from the atom it was
                                                      added to
16May2024          JDK         - log_analysis.py: Now has an intial_guess=<Boolean> option for the hyperbola
                                                  fit
										
15May2024          JDK         - all2lmp.py: Made "equivs" compatible with new ATOMTYPE:NAME convention
                               - Update examples in EXAMPLES/atom_typing_general/ folder
                               - atom_typing.py: Added "path preserving" general atom types as
                                                * general-pp:2
                                                * general-pp:3
                                                * general-pp:4
                                              which will find all paths between the first neighbor and the
                                              N-th neighbor (N=2,3,4) where the paths are then set in the
                                              general atom type string
                               - Added "automatic_tests" directory where bash scripts will slowly be added
                                 to test each functionality of each code using the CLI to ensure any future
                                 work doesnt break any current features.
												  
14May2024          JDK         - auto_morse_bond_update.py GUI: Finished "Quick help" page.
								
								
-------------------------------------------------------------------------------------------------------------
LUNAR (version 13May2024)

Date               Developer   Description
-------------------------------------------------------------------------------------------------------------
13May2024          JDK         - GUIs: Added traceback exception handling to GUI log
                               - atom_removal: Added ability to remove atoms based on cluster-size or cluster
                                               mass cutoffs 
                               - log_analysis.py: Changed how "modes" are loaded
                               - log_analysis.py: Added the ability for GUI to write "mode"
                               - log_analysis.py: "Modes" can now be written and loaded
                               - log_analysis.py: Added checkbox to GUI to replace logfile when loading mode 
                               - log_analysis.py: Added minimum/maximum analysis methods
                               - atom_typing.py: Now transfers Velocities
                               - all2lmp.py: Now transfers Velocities
                               - add_pi_electrons.py: Now transfers Velocities
                               - atom_removal.py: Now transfers Velocities
                               - auto_morse_bond_update.py: Now transfers Velocities
                               - bond_react_merge.py: Now transfers Velocities
                               - bond_react_merge.py_prep: Now transfers Velocities
                               - atom_typing.py and all2lmp.py: Added if newfile == ':' the codes will not
                                                                write any output files. This was added for
                                                                those who want to call either main() function
                                                                from within their own python script and return
                                                                objects which contain this info (creates a
                                                                speed up as less time is used on IO).
                               - Updated manual to reflect changes

10May2024          JDK         - Added UPDATES log
                               - atom_typing: Enforced include_nta_comments boolean for General:N atom types
# -*- coding: utf-8 -*-
"""
@author: Josh Kemppainen
Revision 1.0
November 3rd, 2023
Michigan Technological University
1400 Townsend Dr.
Houghton, MI 49931
"""
##############################
# Import Necessary Libraries #
##############################
import os

# Function to get merged filename
def merged_name(m):
    basename = os.path.basename(m.filename)
    basename = '{}{}'.format(basename[:basename.rfind('.')], '_merged.lmpmol')
    return basename

# Program to find most frequent element in a list
def most_frequent(List):
    try: stylehint = max(set(List), key = List.count)
    except: stylehint = 'N/A'
    return stylehint

# Function to create chunks and create print string
def divide_chunks(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

# Function to write the generalized LAMMPS input script
def write(newfile, version, atom_style, unique_style_hints, log):
    log.out(f'\n\nWriting {newfile} script')
    with open('in.'+newfile+'.script', 'w') as f:
        # Write header
        f.write('# LAMMPS generalized input script for reducing the simulation cell dimensions to obtain a\n')
        f.write('# desired system density. The force field section will be intialized from the style hints\n')
        f.write('# that may or may not be in the read-in files (if not N/As will be written and will have to\n')
        f.write(f'# be updated. Generalized LAMMPS input script generated by cell_Builder.py {version}.\n\n')
        f.write('# Please look over the script carefully and adjust what is needed. You may also go into\n')
        f.write('# src/cell_builder/lmp_inscript.py to update default information in this script (if\n')
        f.write('# desired).\n')
        
        # Write Initialization info
        f.write('\n\n#------------Initialization------------\n')
        f.write('{:<15} {}\n'.format('units', 'real'))
        f.write('{:<15} {}\n'.format('dimension', 3))
        f.write('{:<15} {}\n'.format('boundary', 'p p p'))
        f.write('{:<15} {}\n'.format('newton', 'on'))
        
        # Write Force Field info
        f.write('\n\n#------------Force Field------------\n')
        f.write('{:<15} {}\n'.format('atom_style', atom_style))
        f.write('{:<15} {}\n'.format('bond_style', most_frequent(unique_style_hints['Bond_Coeffs'])))
        f.write('{:<15} {}\n'.format('angle_style', most_frequent(unique_style_hints['Angle_Coeffs'])))
        f.write('{:<15} {}\n'.format('dihedral_style', most_frequent(unique_style_hints['Dihedral_Coeffs'])))
        f.write('{:<15} {}\n'.format('improper_style', most_frequent(unique_style_hints['Improper_Coeffs'])))
        f.write('{:<15} {}\n'.format('special_bonds', 'lj/coul 0 0 1'))
        f.write('\n')
        
        # Write non-bond section
        f.write('{:<15} {}\n'.format('kspace_style', 'pppm 1.0e-4'))
        pair_coeff = most_frequent(unique_style_hints['Pair_Coeffs'])
        if pair_coeff == 'lj/class2/coul/long':
            f.write('{:<15} {} {}\n'.format('pair_style', pair_coeff, '12.0'))
            f.write('{:<15} {}\n'.format('pair_modify', 'mix sixthpower'))
        elif pair_coeff == 'lj/cut/coul/long':
            f.write('{:<15} {} {}\n'.format('pair_style', pair_coeff, '10.0'))
            f.write('{:<15} {}\n'.format('pair_modify', 'mix arithmetic'))
        else:
            f.write('{:<15} {} {}\n'.format('pair_style', pair_coeff, '10.0'))
            f.write('{:<15} {}\n'.format('pair_modify', 'mix arithmetic'))
        f.write('\n')
            
        # Write LAMMPS neigh settings
        f.write('{:<15} {}\n'.format('neighbor', '2.0 bin'))
        f.write('{:<15} {}\n'.format('neigh_modify', 'delay 0 every 1 check yes one 5000 page 100000'))
        
        # Write read_data
        f.write('\n\n#------------Read datafile------------\n')
        f.write('{:<15} {}.data\n'.format('read_data', newfile))
        
        # Write Settings
        ptemp = 300;
        f.write('\n\n#------------Settings------------\n')
        f.write('{:<15} {:<8} {:<6} {:<10} {}\n'.format('variable', 'myid', 'string', 'UPDATE_ME', '# unique LAMMPS out filename'))
        f.write('{:<15} {:<8} {:<6} {:<10} {}\n'.format('variable', 'ptemp', 'equal', ptemp, '# processing temp K'))
        f.write('{:<15} {:<8} {:<6} {:<10} {}\n'.format('variable', 'RunTime', 'equal', 4, '# densification Run Time in ns'))
        f.write('{:<15} {:<8} {:<6} {:<10} {}\n'.format('variable', 'MinTime', 'equal', 200, '# minimize every MinTime in ps'))
        f.write('{:<15} {:<8} {:<6} {:<10} {}\n'.format('variable', 'targetD', 'equal', '1.20', '# final system density in g/cc'))
        f.write('{:<15} {:<8} {:>44}\n'.format('timestep', '1.0', '# Might need to be changed'))
        f.write('{:<15} {} {}\n'.format('velocity', 'all create ${ptemp} 4928459 dist gaussian', '# create some velocities'))
        
        # Write Densify settings
        f.write('\n\n#------------Densification------------\n')
        f.write('# Find LAMMPS settings to densify to targetD in RunTime and minimize every MinTime\n')
        f.write('{:<15} {:<8} {:<6} {:<22} {}\n'.format('variable', 'r', 'equal', '${RunTime}*1000000/dt', '# calculate number of run timesteps'))
        f.write('{:<15} {:<8} {:<6} {:<22} {}\n'.format('variable', 'm', 'equal', '${MinTime}*1000/dt', '# calculate number of minimize timesteps'))
        f.write('{:<15} {:<8} {:<6} {:<22}\n'.format('variable', 'x', 'equal', 'lx'))
        f.write('{:<15} {:<8} {:<6} {:<22}\n'.format('variable', 'y', 'equal', 'ly'))
        f.write('{:<15} {:<8} {:<6} {:<22}\n'.format('variable', 'z', 'equal', 'lz'))
        f.write('{:<15} {:<8} {:<6} {:<22}\n'.format('variable', 'v', 'equal', 'vol'))
        f.write('{:<15} {:<8} {:<6} {:<22}\n'.format('variable', 'd', 'equal', 'density'))
        f.write('{:<15} {:<8} {:<6} {:<22}\n'.format('variable', 'newv', 'equal', '$d*$v/${targetD}'))
        f.write('{:<15} {:<8} {:<6} {:<22}\n'.format('variable', 's', 'equal', '${newv}^(1/3)'))
        f.write('{:<15} {:<8} {:<6} {:<22}\n'.format('variable', 'dx', 'equal', '($s-$x)/$r'))
        f.write('{:<15} {:<8} {:<6} {:<22}\n'.format('variable', 'dy', 'equal', '($s-$y)/$r'))
        f.write('{:<15} {:<8} {:<6} {:<22}\n'.format('variable', 'dz', 'equal', '($s-$z)/$r'))
        f.write('\n')
        f.write('{:<15} {}\n'.format('fix', '1 all nvt temp ${ptemp} ${ptemp} $(100.0*dt)'))
        f.write('{:<15} {}\n'.format('fix', '2 all deform 1 x vel ${dx} y vel ${dy} z vel ${dz}'))
        
        # Thermosettings
        thermo = ['step', 'press', 'density', 'ke', 'pe', 'etotal', 'evdwl', 'ecoul',
                  'epair', 'ebond', 'eangle', 'edihed', 'eimp']
        chunks = list(divide_chunks(thermo, 20))
        f.write('\n\n#------------Thermosettings------------\n')
        f.write('{:<15} {}\n'.format('thermo', '20000'))
        f.write('{:<15} {} {}'.format('thermo_style', 'custom', ' '.join(chunks[0]) ))
        if len(chunks) == 1: f.write('\n')
        else:
            f.write(' &\n')
            for n, chunk in enumerate(chunks, 1):
                if n > 1 and n < len(chunks):
                    f.write('{:<15} {} &\n'.format('', ' '.join(chunk) ))
                elif n > 1:
                    f.write('{:<15} {}\n'.format('', ' '.join(chunk) ))
        f.write('{:<15} {}\n'.format('log', '${myid}.log.lammps'))
        f.write('{:<15} {}\n'.format('restart', '20000 rst1.a.${myid} rst2.a.${myid}'))
        
        # Run simulation
        f.write('\n\n#------------Run------------\n')
        f.write('{:<15} {}\n'.format('run', '$r every $m &'))
        f.write('{:>5} {}\n\n'.format('', '"minimize     1.0e-4 1.0e-6 1000 100000"'))
        f.write('{:<15} {}\n'.format('write_data', '${myid}.data'))
    return
# -*- coding: utf-8 -*-
"""
@author: Josh Kemppainen
Revision 1.1
March 27th, 2024
Michigan Technological University
1400 Townsend Dr.
Houghton, MI 49931
"""
##############################
# Import Necessary Libraries #
##############################
import src.io_functions as io_functions
import os


# Function to get merged filename
def merged_name(m, newfile, tag):
    oldname = os.path.basename(m.filename)
    if ':' in newfile or newfile == '':
        newname = io_functions.get_basename(oldname, newfile=newfile, character=':', pflag=False)
    else: newname = ('{}{}'.format(tag, newfile))
    return newname

# Program to find most frequent element in a list
def most_frequent(List):
    try: stylehint = max(set(List), key = List.count)
    except: stylehint = 'N/A'
    return stylehint

# Function to create chunks and create print string
def divide_chunks(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

# Function to write the generalized LAMMPS input script
def bond_react(filename, newfile, version, merge, atom_style, new, pairids, template_pairs, log):
    log.out(f'\n\nWriting {filename}')
    with open(filename, 'w') as f:
        # Write header
        f.write('# LAMMPS generalized input script for using fix bond/react. The force field section will be\n')
        f.write('# intialized from the style hints that may or may not be in the read-in files (if not N/As\n')
        f.write('# will be written and will have to be updated. Generalized LAMMPS input script generated by\n')
        f.write(f'# bond_react_merge.py {version}.\n\n')
        f.write('# Please look over the script carefully and adjust what is needed. You may also go into\n')
        f.write('# src/bond_react_merge/lmp_inscript.py to update default information in this script (if\n')
        f.write('# desired).\n\n')
        f.write('# Additional tip to be able to read a LAMMPS simulated fix bond/react file back into LAMMPS\n')
        f.write('# if you are on linux. After running a fix bond/react simulation additional information\n')
        f.write('# is written to the LAMMPS datafile, however LAMMPS can not re-read this information, so\n')
        f.write('# it must be removed. You may run the following command in Linux:\n')
        f.write("#     sed -i.bak '/bond_react_props_internal/,$d' FILENAME.data\n")
        f.write('# Which will create a .bak file of the original FILENAME.data and then remove the section\n')
        f.write('# in the orginal file that LAMMPS cannot read.\n')
        
        # Write Initialization info
        f.write('\n\n#------------Initialization------------\n')
        f.write('{:<15} {}\n'.format('units', 'real'))
        f.write('{:<15} {}\n'.format('dimension', 3))
        f.write('{:<15} {}\n'.format('boundary', 'p p p'))
        f.write('{:<15} {}\n'.format('newton', 'on'))
        
        # Write Force Field info
        f.write('\n\n#------------Force Field------------\n')
        f.write('{:<15} {}\n'.format('atom_style', atom_style))
        f.write('{:<15} {}\n'.format('bond_style', most_frequent(new.unique_style_hints['Bond_Coeffs'])))
        f.write('{:<15} {}\n'.format('angle_style', most_frequent(new.unique_style_hints['Angle_Coeffs'])))
        f.write('{:<15} {}\n'.format('dihedral_style', most_frequent(new.unique_style_hints['Dihedral_Coeffs'])))
        f.write('{:<15} {}\n'.format('improper_style', most_frequent(new.unique_style_hints['Improper_Coeffs'])))
        f.write('{:<15} {}\n'.format('special_bonds', 'lj/coul 0 0 1'))
        f.write('\n')
        
        # Write non-bond section
        f.write('{:<15} {}\n'.format('kspace_style', 'pppm 1.0e-4'))
        if new.ff_class == 2:
            f.write('{:<15} {} {}\n'.format('pair_style', most_frequent(new.unique_style_hints['Pair_Coeffs']), '12.0'))
            f.write('{:<15} {}\n'.format('pair_modify', 'mix sixthpower'))
        elif new.ff_class == 1:
            f.write('{:<15} {} {}\n'.format('pair_style', most_frequent(new.unique_style_hints['Pair_Coeffs']), '10.0'))
            f.write('{:<15} {}\n'.format('pair_modify', 'mix arithmetic'))
        f.write('\n')
            
        # Write LAMMPS neigh settings
        f.write('{:<15} {}\n'.format('neighbor', '2.0 bin'))
        f.write('{:<15} {}\n'.format('neigh_modify', 'delay 0 every 1 check yes one 5000 page 100000'))
        
        # Write read_data
        f.write('\n\n#------------Read datafile------------\n')
        f.write('# The extra/... keywords enable extra B/A/D/I due to topology changes caused by reactions\n')
        f.write('{:<15} {}\n'.format('read_data', 'UPDATE_ME.data &'))
        f.write('{:<15} {}\n'.format('', 'extra/special/per/atom 20 &'))
        f.write('{:<15} {}\n'.format('', 'extra/bond/per/atom 10 &'))
        f.write('{:<15} {}\n'.format('', 'extra/angle/per/atom 20 &'))
        f.write('{:<15} {}\n'.format('', 'extra/dihedral/per/atom 50 &'))
        f.write('{:<15} {}\n'.format('', 'extra/improper/per/atom 20'))
        f.write('\n# Reading the other files if needed (shifting them as desired) ...\n')
        f.write('#{:<15} {}\n'.format('read_data', 'UPDATE_ME1.data add append shift 10  0  0'))
        f.write('#{:<15} {}\n'.format('read_data', 'UPDATE_ME2.data add append shift 10  5  5'))
        f.write('#{:<15} {}\n'.format('read_data', 'UPDATE_ME3.data add append shift  5 15 15'))
        f.write('\n# Also note that cell_builder.py may be used to randomize\n')
        f.write('# molecules with easy control over stoichiometric ratio.')
        
        # Write Settings
        ptemp = 300; nevery = 10;
        f.write('\n\n#------------Settings------------\n')
        f.write('{:<15} {:<6} {:<6} {:<10} {}\n'.format('variable', 'myid', 'string', 'UPDATE_ME', '# unique LAMMPS out filenameID'))
        f.write('{:<15} {:<6} {:<6} {:<10} {}\n'.format('variable', 'ptemp', 'equal', ptemp, '# processing temp K'))
        f.write('{:<15} {:<6} {:<6} {:<10} {}\n'.format('variable', 'nevery', 'equal', nevery, '# attempt reaction every this many steps'))
        f.write('{:<15} {:<6} {:<6} {:<10} {}\n'.format('variable', 'pseed', 'equal', 94587113, '# probability random number seed (positive integer)'))
        f.write('{:<15} {:<6} {:>44}\n'.format('timestep', '0.5', '# Might need to be changed'))
        f.write('{:<15} {} {}\n'.format('velocity', 'all create ${ptemp} 4928459 dist gaussian', '# create some velocities'))
        
        # Write rxn templates
        f.write('\n\n#------------Read rxn templates------------\n')
        pairids = sorted(list(template_pairs.keys())); tmp_count = 0;
        molmap = {} # { pairid : [mol1, mol2] }
        for i in pairids:
            # sort such that list will be order as ['preN', 'postN']
            pair = sorted(template_pairs[i], reverse=True)
            molmap[i] = []
            if len(pair) == 2:
                pre = merge[pair[0]]; post = merge[pair[1]];
                tmp_count += 1
                molmap[i].append(tmp_count)
                f.write('{:<15} mol{:<2} {}.lmpmol\n'.format('molecule', tmp_count, merged_name(pre, newfile, pair[0])))
                tmp_count += 1
                molmap[i].append(tmp_count)
                f.write('{:<15} mol{:<2} {}.lmpmol\n'.format('molecule', tmp_count, merged_name(post, newfile, pair[1])))
                
        # Write rxn templates
        f.write('\n\n#------------bond/react execution------------\n')
        f.write('{:<8} {}\n'.format('fix', 'myrxn all bond/react stabilization yes statted_grp .03 &'))
        lmp_variables = [];
        for n, i in enumerate(pairids, 1):
            nsteps = str('${nevery}'); pseed = str('${pseed}')
            f.write('{:<15} react rxn{:<2} all {} 0.5 6.0 mol{:<2} mol{:<2} pre{}-post{}_rxn-map_uncommented.txt prob 0.10 {} stabilize_steps 500'.format('', i, nsteps, min(molmap[i]), max(molmap[i]), i, i, pseed ))
            lmp_variables.append('v_rxn{}'.format(i))
            if n < len(pairids): 
                f.write(' &\n')
            else: f.write('\n\n')
            
        # Write thermo settings
        f.write('{:<15} {}\n'.format('fix', '1 statted_grp_REACT nvt temp ${ptemp} ${ptemp} 100'))
        f.write('{:<15} {}\n'.format('fix', '2 bond_react_MASTER_group temp/rescale 1 ${ptemp} ${ptemp} 10 1'))
        
        # Calculate rxns
        f.write('\n\n#------------Calculate rxns------------\n')
        f.write('# You may use the rxnN variables to calculate crosslink\n')
        f.write('# density and then log in thermo_style custom below\n')
        for i in pairids:
            f.write('{:<15} {}{} equal f_myrxn[{}]\n'.format('variable', 'rxn', i, i))
            
        # Thermosettings
        intial = ['step', 'temp', 'press', 'density', 'ke', 'pe', 'etotal', 'evdwl', 'ecoul',
                  'epair', 'ebond', 'eangle', 'edihed', 'eimp']
        thermo = intial + lmp_variables 
        chunks = list(divide_chunks(thermo, 10))
        f.write('\n\n#------------Thermosettings------------\n')
        f.write('{:<15} {}\n'.format('thermo', '2000'))
        f.write('{:<15} {} {}'.format('thermo_style', 'custom', ' '.join(chunks[0]) ))
        if len(chunks) == 1: f.write('\n')
        else:
            f.write(' &\n')
            for n, chunk in enumerate(chunks, 1):
                if n > 1 and n < len(chunks):
                    f.write('{:<15} {} &\n'.format('', ' '.join(chunk) ))
                elif n > 1:
                    f.write('{:<15} {}\n'.format('', ' '.join(chunk) ))
        f.write('{:<15} {}\n'.format('log', '${myid}.log.lammps'))
        f.write('{:<15} {}\n'.format('restart', '2000 rst1.a.${myid} rst2.a.${myid}'))
        
        # Run simulation
        f.write('\n\n#------------Run------------\n')
        f.write('{:<15} {}\n'.format('run', '6000'))
        f.write('{:<15} {}\n'.format('write_data', '${myid}.data'))
        
        # Method to check and write LAMMPS datafiles every crosslink density degree
        # variable         trxn equal v_rxn1+v_rxn2
        f.write('\n\n#------------Generalized Method to write LAMMPS datafiles as a function of crosslink density------------\n')
        f.write('# Caclulate crosslink density\n')
        f.write('#{:<13} {}{} equal f_myrxn[{}]\n'.format('variable', 'rxn', 1, 1))
        f.write('#{:<13} {}{} equal f_myrxn[{}]\n'.format('variable', 'rxn', 2, 2))
        f.write('\n')
        f.write('#{:<13} {} equal v_rxn1+v_rxn2 # Sum all rxns\n'.format('variable', 'trxn'))
        f.write('#{:<13} {} equal 100*(v_trxn/250) # Assume 250 is max count of the sum of rxn1 and rxn2\n'.format('variable', 'pxld'))
        
        f.write('\n# Set run flags to "turn on" and "shut off" after writing a file\n')
        nflags = 9; flag_increment = 10;
        for i in range(1, nflags+1):
            pxld = i*flag_increment
            f.write('#{:<13} {}{} equal {} # {}% fileflag\n'.format('variable', 'pxld', pxld, 0, pxld))
            
        f.write('\n# Set check frequency (every N-timesteps check if v_pxld is eligable to be written)\n')
        f.write('#{:<13} {:<5} equal {:<5} # {}\n'.format('variable', 'check', 100, 'check every N-timesteps (if to small check may not occur as quick as the reactions are progressing)'))
        f.write('#{:<13} {:<5} equal {:<5} # {}\n'.format('variable', 'Run', 2, 'run time in ns'))
        f.write('#{:<13} {:<5} equal {:<15} # {}\n'.format('variable', 'i', '(v_Run*1000000/dt)/v_check', 'calculate number of for loop iterations'))
        
        f.write('\n# Run simulation using LAMMPS for loop\n')
        f.write('#label loop\n')
        f.write('#variable a loop $i\n')
        f.write('#run ${check}\n')
        
        f.write('\n# crosslink density percent check\n')
        for i in range(1, nflags+1):
            pxld = i*flag_increment
            lo = str('${pxld}>=') + str(pxld-1)
            hi = str('${pxld}<=') + str(pxld+3)
            g = str('${pxld') + str(pxld) + str('}==0')
            datafile = str('${myid}_pxld_${pxld}.data')
            writedata = 'write_data {}'.format(datafile)
            flag = '{:<13} xld{} equal 1'.format('variable', pxld)
            f.write('#if "{:<12} && {} && {}" then "{}" "{}" # {}%\n'.format(lo, hi, g, writedata, flag, pxld))
            
        f.write('\n#next a\n')
        f.write('#jump SELF loop\n')
        f.write('#label break\n')
        f.write('#print "***ALL DONE***"\n')
        f.write('#write_data  ${myid}_pxld_${pxld}_end_of_loop.data')
    return


# Function to write the generalized LAMMPS input script
def create_atoms(filename, newfile, version, merge, atom_style, new, log):
    log.out(f'\n\nWriting {filename}')
    with open(filename, 'w') as f:
        # Write header
        f.write('# LAMMPS generalized input script for using create_atoms. The force field section will be\n')
        f.write('# intialized from the style hints that may or may not be in the read-in files (if not N/As\n')
        f.write('# will be written and will have to be updated. Generalized LAMMPS input script generated by\n')
        f.write(f'# bond_react_merge.py {version}.\n\n')
        f.write('# Please look over the script carefully and adjust what is needed. You may also go into\n')
        f.write('# src/bond_react_merge/lmp_inscript.py to update default information in this script (if\n')
        f.write('# desired).\n')
        
        # Write Initialization info
        f.write('\n\n#------------Initialization------------\n')
        f.write('{:<15} {}\n'.format('units', 'real'))
        f.write('{:<15} {}\n'.format('dimension', 3))
        f.write('{:<15} {}\n'.format('boundary', 'p p p'))
        f.write('{:<15} {}\n'.format('newton', 'on'))
        
        # Write Force Field info
        f.write('\n\n#------------Force Field------------\n')
        f.write('{:<15} {}\n'.format('atom_style', atom_style))
        f.write('{:<15} {}\n'.format('bond_style', most_frequent(new.unique_style_hints['Bond_Coeffs'])))
        f.write('{:<15} {}\n'.format('angle_style', most_frequent(new.unique_style_hints['Angle_Coeffs'])))
        f.write('{:<15} {}\n'.format('dihedral_style', most_frequent(new.unique_style_hints['Dihedral_Coeffs'])))
        f.write('{:<15} {}\n'.format('improper_style', most_frequent(new.unique_style_hints['Improper_Coeffs'])))
        f.write('{:<15} {}\n'.format('special_bonds', 'lj/coul 0 0 1'))
        f.write('\n')
        
        # Write non-bond section
        f.write('{:<15} {}\n'.format('kspace_style', 'pppm 1.0e-4'))
        if new.ff_class == 2:
            f.write('{:<15} {} {}\n'.format('pair_style', most_frequent(new.unique_style_hints['Pair_Coeffs']), '12.0'))
            f.write('{:<15} {}\n'.format('pair_modify', 'mix sixthpower'))
        elif new.ff_class == 1:
            f.write('{:<15} {} {}\n'.format('pair_style', most_frequent(new.unique_style_hints['Pair_Coeffs']), '10.0'))
            f.write('{:<15} {}\n'.format('pair_modify', 'mix arithmetic'))
        f.write('\n')
            
        # Write LAMMPS neigh settings
        f.write('{:<15} {}\n'.format('neighbor', '2.0 bin'))
        f.write('{:<15} {}\n'.format('neigh_modify', 'delay 0 every 1 check yes one 5000 page 100000'))
        
        # Write read_data
        f.write('\n\n#------------Create box, read force field, and read molecules------------\n')
        f.write('# Create region and then create box\n')
        f.write('{:<15} {} {} {:>3}\n'.format('variable', 'lo', 'equal', '-20'))
        f.write('{:<15} {} {} {:>3}\n'.format('variable', 'hi', 'equal', '20'))
        f.write('{:<15} {} {}\n'.format('region', 'cell', 'block ${lo} ${hi} ${lo} ${hi} ${lo} ${hi}'))
        
        f.write('\n# The extra/... keywords enable extra B/A/D/I for when reading in molecule files\n')
        f.write('{:<15} {} {}\n'.format('create_box', len(new.masses), 'cell &'))
        f.write('{:<15} {} {} &\n'.format('', 'bond/types', len(new.bond_coeffs)))
        f.write('{:<15} {} {} &\n'.format('', 'angle/types', len(new.angle_coeffs)))
        f.write('{:<15} {} {} &\n'.format('', 'dihedral/types', len(new.dihedral_coeffs)))
        f.write('{:<15} {} {} &\n'.format('', 'improper/types', len(new.improper_coeffs)))
        f.write('{:<15} {}\n'.format('', 'extra/special/per/atom 20 &'))
        f.write('{:<15} {}\n'.format('', 'extra/bond/per/atom 10 &'))
        f.write('{:<15} {}\n'.format('', 'extra/angle/per/atom 20 &'))
        f.write('{:<15} {}\n'.format('', 'extra/dihedral/per/atom 50 &'))
        f.write('{:<15} {}\n'.format('', 'extra/improper/per/atom 20'))
        
        f.write('\n# Finally read the force feild\n')
        f.write('{:<15} {} {}\n'.format('read_data', 'force_field.data', 'add append'))

        
        # Write molecule files
        f.write('\n# Read molecule files ...\n')
        molfiles = {} # {file-tag : filename}
        for file in merge:
            m = merge[file]
            basename = merged_name(m, newfile, file)
            
            # strip last number of filename. Assumes tags either:
            # - data1, data2, ... dataN  ->  data
            # - pre1, pre2, ... preN     ->  pre
            # - post1, post2, ... postN  ->  post
            tmpname = ''.join([i for i in file if i.isalpha()])
            if tmpname == 'data':
                molfiles[file] = basename
                f.write('{:<15} {} {}.lmpmol\n'.format('molecule', file, basename))
                
        # Write Settings
        f.write('\n\n#------------Settings------------\n')
        f.write('{:<15} {:<6} {:<6} {:<10} {}\n'.format('variable', 'myid', 'string', 'UPDATE_ME', '# unique LAMMPS out filenameID'))
        f.write('{:<15} {:<6} {:<6} {:<10} {}\n'.format('variable', 'pseed', 'equal', 94587113, '# probability random number seed (positive integer)'))
        
            
        # Thermosettings
        intial = ['step', 'temp', 'press', 'density', 'ke', 'pe', 'etotal', 'evdwl', 'ecoul',
                  'epair', 'ebond', 'eangle', 'edihed', 'eimp']
        thermo = intial
        chunks = list(divide_chunks(thermo, 10))
        f.write('\n\n#------------Thermosettings------------\n')
        f.write('{:<15} {}\n'.format('thermo', '2000'))
        f.write('{:<15} {} {}'.format('thermo_style', 'custom', ' '.join(chunks[0]) ))
        if len(chunks) == 1: f.write('\n')
        else:
            f.write(' &\n')
            for n, chunk in enumerate(chunks, 1):
                if n > 1 and n < len(chunks):
                    f.write('{:<15} {} &\n'.format('', ' '.join(chunk) ))
                elif n > 1:
                    f.write('{:<15} {}\n'.format('', ' '.join(chunk) ))
        f.write('{:<15} {}\n'.format('log', '${myid}.log.lammps'))
        f.write('{:<15} {}\n'.format('restart', '2000 rst1.a.${myid} rst2.a.${myid}'))
        
        # use create atoms
        f.write('\n\n#------------Use create atoms------------\n')        
        f.write('# Create atoms (EXAMPLE: try generating 5 of each molecule, using 100 attempts)\n')
        for tag in molfiles:
            f.write('{:<15} {} {} {} {}\n'.format('create_atoms', '0', 'random 5 ${pseed} NULL overlap 1.0 maxtry 100 mol', tag, '${pseed}'))
        f.write('{:<15} {}\n'.format('write_data', '${myid}.data'))
    return
# The "#" character is a comment character, where anything trailing the "#"
# character will be ignored. This file is meant to provide the text to display
# in the popup when pressing the "Quick help" button.
#
# Please note that if editing this file all spaces are created using the space
# bar and not the tab key, since this text is read and directly used Tkinter
# scrollable Text widget, it is important to maintain proper spacing.
# Indentations will use two spaces.
#
# The maximum column position should be restricted to 145.
#
# Last edited 4/10/2024
#
************
* Overview *
************

  LUNAR/cell_builder.py  is meant to fill a simulation box with molecules randomly. The inputs to cell_builder.py are a LAMMPS datafile, where a
  force field may or may not be applied to a molecular system. If there is a force field, cell_builder offers methods for joining the force field
  of multiple LAMMPS datafiles together. 

**********
* Inputs *
**********

  files stack and file-tag
    A file or group of files can be added to the stack by clicking the "add file(s) to stack button", which will open up a files dialog box to
    either select a single file or group of files. The last file on the stack can be removed by clicking "remove the last file from stack" or
    the entire stack can be cleared by clicking "clear stack". If more files are attempted to be loaded then the number of entries on the stack,
    the files stack will automatically grow to accommodate the new files.
	
    The qty entry will default to a value of 1, when loading in a file, however the qty entry should be updated to the desired quantity of each
    molecule, to set the mixing ratio of the different molecule types. A shortcut naming scheme has been developed where users can set the qty
    per file by setting the filename as:
      %%%%%qty=INT.data; where %%%%% can be any text.
	  
      The INT must be located between the 'qty=' string and the '.data', where INT is the qty of the file.
	  
    The qty maybe set to ZERO to read in a LAMMPS type script to set groups of atoms, which will be maintained as each molecule gets
    duplicated. The LAMMPS type script that cell_builder.py supports is very similar to using the LAMMPS "group" command. Please see the official
    LUNAR manual in LUNAR/docs for more details on the format of the grouping file.	
	
    The "qty" maybe set to ZERO to read in a LAMMPS datafile as a system. Many LAMMPS datafiles can be read in this way, where each time a LAMMPS
    datafile is read in the simulation cell will keep adjusting to accommodate the new simulation cell. During this process the simulation cell
    will either grow or stay the same. No checks are performed if grouping a simulation cell where a particular molecule is periodically bonded,
    thus careful consideration must be given to how the simulation cell is setup in each file that is read in with the "qty" set to ZERO. This
    method will allow a "system" to be defined and then molecules can be added to the system using the lattice points that cell_builder.py
    derives. NOTE that during the creation of lattice points, each lattice point will be checked to see if it will create overlapping atoms with
    the system defined via the read in files with the qty set to ZERO. Additionally, users may find that the simulation cell of the read in files
    with the "qty" set to ZERO may need to be modified to allow cell_builder.py to insert the number of molecules users supply to the code.
            
  parent_directory
    Button to load in a path to the directory where the outputs will be written to. You may also directly type the path in the entry to the 
    right of the button as well. The path can be a full path or relative path or be set to the . (dot character) to write files to the
    location where cell_builder.py is currently being run from. Setting parent_directory to "topofile" will use the path of the topofile
    variable to write the files to that location on your machine. The "topofile" shortcut string should be the default usage for 1st time users.
	
  newfile
    An entry to supply a string that will be used to set the output files basenames.

***********
* Options *
***********

  duplicate
    An entry to set an int value to control the number of times each qty of each molecule is duplicated.
	
  domain
    An entry in which to set the lattice domain. The lattice points will always be generated about the 0, 0, 0 position in x, y, and z. However,
    the number of lattice points in the x, y, and z directions can be set by the user or set to be cubic. The following options are available:
      'cubic' which automatically determines the number of lattice points required based on the qty of files and the duplicate variable.
      'Ni x Nj x Nk' where 'Ni' is the number of lattice points in the x-direction, 'Nj' is the number of lattice points in the y-direction, and
      'Nk' is the number of lattice points in the z-direction. Please note the following about 'Ni x Nj x Nk':
        If group_monomers_locally is False, 'Ni x Nj x Nk' must be greater than duplicate*sum(qty of all files), to allow for enough lattice
        points. If there is not enough lattice points, the code will exit with an ERROR.
        
        If group_monomers_locally is True, 'Ni x Nj x Nk' must be greater than duplicate value, to allow for enough lattice points. If there is
        not enough lattice points, the code will exit with an ERROR. Additionally, by default during the initial grouping of monomers a 'cubic'
        lattice will be used.
		
  distance_scale
    An entry to set the distance multiplier value of the "longest" molecule of the system defined via the read-in from the files dictionary and
    controls the spacing of the lattices points where each molecule will randomly be placed and randomly rotated about. A distance_scale of 1
    ensures no atom positions will be overlapped during the random rotations of each molecule however it cannot guarantee that not all vdw radii
    or the non-bonded molecules will overlap. Therefore, a safe default distance_scale value of 1.2 is recommended (20% more space than the
    longest molecule).

  atom_style
    A drop-down menu to select the format of the Atoms section that will be written in the outputted LAMMPS datafile. The cell_builder.py module
    supports many LAMMPS atom styles, however if the information for the atom style does not exist in the read-in datafile, the code will insert
    ZERO's and will WARN the user of doing so. In general for fix-bond force fields the full atom style is recomended and for ReaxFF the charge
    atom style is recomended.
	
  include_type_labels
    A drop-down menu to select the Boolean to include LAMMPS TypeLabels in the written LAMMPS datafile or the written LAMMPS molecule files. If
    the Boolean is True TypeLabels will be written in files, if the Boolean is False the written files will use the standard LAMMPS TypeIDs.
	
  reset_molids
    A drop-down menu to select how the molIDs are determined when building large molecular systems. This option only makes sense to use with
    a LAMMPS atom style that supports molIDs, such as the "full" atom style. Defining molIDs in different ways can be useful as a pre/post
    processing as it provides a method to group atoms. Additionally, groups of atoms within LAMMPS can be defined via molIDs or certain LAMMPS
    commands can make use of molIDs (if consistently defined) to control operation of the command such as the "fix bond/react" "molecule [off or
    inter or intra]" options. The following options are supported to define molIDs with cell_builder:
      'skip' will use the molIDs set in the files that are read in. If the file format supplied to cell_builder.py does not have molIDs, every
             atom molID will default to one.

      'files' will set molIDs based on the order the files are read into cell_builder.py, where every atom in the first file will be assigned to
              molID one, every atom in the second file will be assigned to molID two and so on.
			  
      'offset' will offset the molIDs in each file as each file is read in. If every atoms molID are the same in each file the 'offset' method
               and the 'files' method will create the same result. If the file contains different molIDs on different atoms and you wish to
               maintain the distinction, the 'offset' is the method to use.
			   
      'clusters' will perform a cluster analysis, where the "clusters" of atoms are determined via bonding connectivity, where the criteria for
                 atoms to be part of the same "cluster" is that the atoms must be linked by at least one covalent bond to the cluster. The
                 clusters are then sorted by the number of atoms, where the largest number of atoms is identified as cluster one, then molIDs
                 are incremented and are assigned to each of the remaining clusters (i.e., the largest cluster of atoms will have molID 1, and
                 then the smallest cluster will have a molID of NCLUSTERS found).
				 
  unwrap_atoms_via_image_flags
    A drop-down menu to select the Boolean to unwrap atoms by image flags or not to unwrap atoms by image flags. If your system has all image
    flags as zeros the atom positions will remain the same, however, if they are none zero the atoms will be displaced by the image flag
    multiplied by the simulation cell dimension. The default value to unwrap_atoms_via_image_flags should be True. There are cases however that
    cell_builder.py may be used to randomize ReaxFF simulation "cubes" randomly and allow them to react to one another based on the ReaxFF
    parameterization to build complex randomized nano-micro structures, in which unwrap_atoms_via_image_flags  can be set as False. 
	
  group_monomers_locally    
    A drop-down menu to select the Boolean to first group monomers into smaller subcells and then randomly disperse the smaller sub cells in a
    large simulation cell. This option only makes sense for multi-component systems as it helps ensure even dispersion of molecule types. 
	
  seed
    An entry to supply a seed to the random number generate to define the random orientations and random lattice points each molecule will be
    placed on. If the seed value is set to ZERO, the current system time from your computer is used to provide a seed to the random number
    generator.
	
  max X- Y- and Z-rotations
    Entries to supply the maximum amount rotation in degrees each molecule is rotated about each axis.
	
  force_field_joining
    A drop-down menu to select how to handle the force field between multiple LAMMPS datafiles, where the following options exist:
      'none'   which assumes all LAMMPS coefficient types are the same in all the read in files and applies no offset to the files as they are
               being used to generate a large molecular system. This option should be used if your files where processed with LUNAR
               bond_react_merge.py to ensure that the force field between the output system is consistent with the reaction templates.
			   
      'merge'  which applies the merging processes present LUNAR/bond_react_merge.py to merge all coefficient types amongst all read in files.
               This option requires that all LAMMPS datafiles have the LUNAR/all2lmp.py style of comments.
			   
      'offset' which applies an offset to each coefficient type in each file as it is read into cell_builder.py.

	
***********
* Buttons *
***********

  Run LUNAR/cell_builder.py
    A button to run the cell_builder.py to build large random molecular systems, using all settings defined in the GUI.
	
  Save the current GUI settings as the default GUI settings
    A button to update variables in cell_builder.py file. Each time the GUI is launched all GUI settings are loaded from the cell_builder.py
    file. Thus this button creates a method to update the cell_builder.py file. The CLI also initializes its defaults from the variables in the
    cell_builder.py, so this button updates the defaults for that run mode as well. Finally, running cell_builder.py from an IDE, the defaults
    for IDE usage are also set by the variables in the cell_builder.py file, thus this button will also update the defaults for IDE usage.
    
  Quick help
    A button to create a popup for quick help and guidance.

*****************************************************************************
* Please see the "Code: cell_builder.py" chapter in the official manual     *
* found in the LUNAR/docs folder for further details.                       *
*****************************************************************************
# The "#" character is a comment character, where anything trailing the "#"
# character will be ignored. This file is meant to provide the text to display
# in the popup when pressing the "Quick help" button.
#
# Please note that if editing this file all spaces are created using the space
# bar and not the tab key, since this text is read and directly used Tkinter
# scrollable Text widget, it is important to maintain proper spacing.
# Indentations will use two spaces.
#
# The maximum column position should be restricted to 145.
#
# Last edited 4/10/2024
#
************
* Overview *
************

  LUNAR/all2lmp.py is meant to apply a force field to a molecular system. This is a quick guide to the all2lmp.py module. More details can be
  found in the official manual found in the LUNAR/docs folder. 

**********
* Inputs *
**********

  topofile   
    Button to load in a file defining atomic positions and bonding connectivity. You may also directly type the filename in the entry to the
    right of the button as well. The supported file extensions are:
      .data  or  .mol  or  .mol2  or  .sdf  or  .pdb  or  .mdf (from Materials Studio Insight module)
            
  nta_file
    Button to load in a file defining atom types to use to assign the force field parameters. You may also directly type the filename in the
    entry to the right of the button as well. The filename must have either the .nta extension or .car extension (to pair with .mdf extension
    in topofile option to read in Material Stuido .mdf/.car files) or be a string value that will call a shortcut option. The supported shortcut
    options are as follows:
      "topofile"
        Which will construct the nta_file filename by using the basename of the topofile entry and appending the .nta extension (assumes that the
        corresponding nta_file basename is identical to the topofile basename).
      "types_from_pdb.nta"
        Which will inform all2lmp.py to look for atom type strings in the location of the atom name column of the .pdb file and then apply those
        atom types to the system. This method requires manual editing of the .pdb file and is mainly meant for an integration method with packmol
        since packmol will maintain the atom name column.   
      ff_name
        Where ff_name is replaced with a supported ff_name string from atom_typing.py. Supported ff_name strings:
          "PCFF"
          "PCFF-IFF"
          "CVFF"
          "CVFF-IFF"
          "compass"
          "Clay-FF"
          "DREIDING"
          "OPLS-AA"		  
        which will then automatically call atom_typing.py from all2lmp.py. Allowing for a single step procedure to build a LAMMPS datafile. You
        may also append the -q characters (i.e. DREIDING-q) to call the Gasteiger charing algorthim from atom_typing.py to assign Gasteiger
        charge which will then also turn off the bond-inc charging of all2lmp.py.
  
  frc_file
    Button to load in a file defining the force field parameters. You may also directly type the filename in the entry to the right of the button
    as well. The file format is .frc from the Insight module of Materials Studio.
	
  assumed
    Button to load in a file defining the assumed parameters based on simple elemental mapping. You may also directly type the filename in the
    entry to the right of the button as well. The usage of this file is force field dependant and requires the use_assumed_auto_fill Boolean to
    be True. In general this file should be rarely used to apply a force field to a system.
	
  parent_directory
    Button to load in a path to the directory where the outputs will be written to. You may also directly type the path in the entry to the
    right of the button as well. The path can be a full path or relative path or be set to the . (dot character) to write files to the location
    where all2lmp.py is currently being run from. Setting parent_directory to "topofile" will use the path of the topofile variable to write
    the files to that location on your machine. The "topofile" shortcut string should be the default usage for 1st time users.
	
  newfile
    An entry to supply a string that will be used to set the output files basename. The following options exist for using the newfile string for
    setting the output file basename: 
      
      if newfile starts with ':' or ends with ':'
        The output filename(s) will be the same as the input filename(s), but will have a suffix or prefix added to the file basename. The
        following are examples:
          Suffix (newfile == ':_IFF'  and topofile == 'detda.data')
            basename = 'detda_IFF', where the ':' character acts as a placeholder for the topofile basename.
          Prefix (newfile == 'IFF-:'  and topofile == 'detda.data')
            basename = 'IFF-detda', where the ':' character acts as a placeholder for the topofile basename.
        Recommended usage: common and safe as this method is safe and output filename(s) carry similar names to input filename(s).
		
      if newfile == 'ANYTEXT'
        The output filename(s) will be set as 'ANYTEXT'. For example:
          newfile = 'detda_renamed' and topofile = 'detda.data'
          basename = 'detda_renamed'
        Recommended usage: occasional and safe as output filename(s) no longer carry similar names as output filename(s), but is safe as output
        filename(s) will not overwrite input filename(s).
      
      if newfile == '':
        The output filename(s) will be the same as the input filename(s). This can be a dangerous option as you may inadvertently overwrite a
        file and then may assume the file to contain certain information, but it contains other information. Recommended usage: rare and
        dangerous as this could lead to using incorrect files if not paying attention very carefully.

***********
* Options *
***********

  ff_class
    A drop-down menu to select the type of force field that is being read-in via the frc_file entry. Currently supported force field types and
    their definitions:
        0 = OPLS-AA or OPLS-UA
        1 = class1 (CVFF, CVFF-IFF, Clay-FF)
        2 = class2 (PCFF, PCFF-IFF, COMPASS)
        d = DREIDING
        r = ReaxFF
        s1 = skeleton datafile with no coeffs in class1 format
        s2 = skeleton datafile with no coeffs in class2 format		
    s1 and s2 notes:
      Note, that when using either s1 or s2, the frc_file that is listed is not used and can be left as any frc file.
    r notes: 
      Note that when using r, the nta_file that is listed is not used and can be left as any nta file. The element types and masses will be
      derived from the all2lmp_reaxff.frc file.
    It is important that ff_class and frc_file is consistent. If the ff_class definition and frc_file is inconsistent, the code will exit with
    an ERROR.
	
  atom_style
    A drop-down menu to select the format of the Atoms section that will be written in the outputted LAMMPS datafile. The all2lmp.py module
    supports many LAMMPS atom styles, however if the information for the atom style does not exist in the read-in frc_file, the code will insert
    ZERO's and will WARN the user of doing so. In general for fix-bond force fields the full atom style is recomended and for ReaxFF the charge
    atom style is recomended.
	
  use_auto_equivalences
    A drop-down menu to select the Boolean to use auto equivalences or not. If the Boolean is True, auto equivalences will be used, if the
    Boolean is False auto equivalences will not be used. It is recommended to use auto equivalences as they supplement fully parameterized
    interactions of a given force field. The usage of auto equivalences is integrated into the bond-increment charging method controled by
    reset_charges, the bond-stretch and bond-bend equilbrium parameters for class2 force fields and the usage of morse bonds over harmonic
    bonds for class1 force fields controled by use_morse_bonds.
	
  use_morse_bonds
    A drop down menu to select the Boolean to use morse bonds or not. If the Boolean is True and the frc_file has morse bonds defined, and
    ff_class is 1, morse bonds will be used over harmonic bonds, if the Boolean is False harmonic bonds will not be used. 
	
  use_assumed_auto_fill
    A drop-down menu to select the Boolean to use assumed parameters defined by coeff types in the assumed file. If the Boolean is True and a
    set of parameters cannot be found, and the elemental composition is defined in the assumed file, the assumed parameters will be used, if
    the Boolean is False and parameters cannot be found, zeros will be inserted. It is recommended to not use this option except in rare cases.
	
  add2box
    An entry to set a float value, which will be added to each face of the simulation cell. A positive value means expanding each face of the
    simulation cell and a negative value means reducing each face of the simulation cell. If the read-in system has non-zero image flags and
    add2box is non-zero, this option will not be used, since moving the simulation cell walls for a periodically bonded system is not a good
    idea.
	
  reset_molids
    A drop-down menu to select the Boolean to use reset molids or not. If the Boolean is True a cluster analysis will be performed and the molIDs
    will be set where the largest molecule gets assigned to molID 1 and subsequent smaller molecules will increment the molID count, if the
    Boolean is False molIDs will remain the same as the input molIDs. If the input file does not inherently contain molIDs, the molIDs are
    initialized as ONE's even if multiple molecules exist in the file.
	
  reset_charges
    A drop-down menu to select the Boolean to reset partial atomic charges or not. If the Boolean is True all atomic partial charges will be
    reset using the bond-increment method (with bond-increments being read from the frc_file), if the Boolean is False the partial atomic charges
    will remain as the charges that are read into all2lmp.py. For chemical file formats that do not support charge information (such as .mol),
    the charges are initialized as ZERO's when reading the file.

  write_txt_comments
    A drop-down menu to select the Boolean to write a text file detailing how each parameter was found. If the Boolean is True the comment file
    will be written, if the Boolean is False the comments file will not be written. It is recommended to write the text comment file for later
    reference since it provides a verbose output of the parameters used in the force field application.
	
  write_bond_react
    A drop-down menu to select the Boolean to write a LAMMPS molecule with enough information to use with the LAMMPS "fix bond/react" command. If
    the Boolean is True the molecule file will be written, if the Boolean is False the molecule file will not be written. Using a file for a "fix
    bond/react" simulation may require manual editing to "merge" all parameters with other molecule files. If interested in running a "fix
    bond/react" simulation please look into merging files using LUNAR/bond_react_merge.py. Alternatively, this molecule file may be useful in 
    other LAMMPS commands such as "fix shake", "fix create_atoms", ...
	
  include_type_labels
    A drop-down menu to select the Boolean to include LAMMPS TypeLabels in the written LAMMPS datafile or the written LAMMPS molecule file that
    can be enabled by using write_bond_react. If the Boolean is True TypeLabels will be written in files, if the Boolean is False the written 
    files will use the standard LAMMPS TypeIDs.
	
  ignore_missing_parameters
    A drop-down menu to select the Boolean to ignore any missing parameters. If the molecular system can not be fully parameterized (i.e. if a
    parameter could not be found for every atom type, bond type, angle type, dihedral type, improper type or partial charge in the frc_file),
    the code will ZERO all parameters before writing the LAMMPS datafile. To override this behavoir set ignore_missing_parameters as True, to
    get a parameterized LAMMPS datafile with ZERO's only in the missing parameter locations.
	
  X-shift and Y-shift and Z-shift
    An entry which controls the optional shift to apply to a molecular systems. The value(s) can be an int or a float values to set the shift
    in each direction. This shifts the atoms and the simulation cell. If  X-shift,  Y-shift, and Z-shift  are set to ZERO, this option is not
    used.
	
  rotate about X and rotate about Y and rotate about Z
    An entry which controls the optional rotation (in degrees) that can applied to the molecular system about the x-axis, y-axis, and z-axis
    respectively. The values can be an int or a float to set the rotation. To use this option the system must be none-periodic (i.e. all image
    flags are zero). Before the system is rotated, it is centered about (0,0,0), rotated, and then shifted back to its original location. After
    the system has been rotated, the simulation cell is redefined with the same amount of "x-padding", "y-padding", and "z-padding", between the
    atoms and the simulation cell before the rotation. If 'x', 'y', and 'z'  are set to ZERO, this option is not used.
	
***********
* Buttons *
***********

  Run LUNAR/all2lmp.py
    A button to run the all2lmp.py to parameterize the molecular system, using all settings defined in the GUI.
	
  Save the current GUI settings as the default GUI settings
    A button to update variables in all2lmp.py file. Each time the GUI is launched all GUI settings are loaded from the all2lmp.py file. Thus
    this button creates a method to update the all2lmp.py file. The CLI also initializes its defaults from the variables in the all2lmp.py, so
    this button updates the defaults for that run mode as well. Finally, running all2lmp.py from an IDE, the defaults for IDE usage are also set
    by the variables in the all2lmp.py file, thus this button will also update the defaults for IDE usage.
    
  Quick help
    A button to create a popup for quick help and guidance.

*****************************************************************************
* Please see the "Code: all2lmp.py" chapter in the official manual found in *
* the LUNAR/docs folder for further details.                                *
*****************************************************************************
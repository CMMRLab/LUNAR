# The "#" character is a comment character, where anything trailing the "#"
# character will be ignored. This file is meant to provide the text to display
# in the popup when pressing the "Quick help" button.
#
# Please note that if editing this file all spaces are created using the space
# bar and not the tab key, since this text is read and directly used Tkinter
# scrollable Text widget, it is important to maintain proper spacing.
# Indentations will use two spaces.
#
# The maximum column position should be restricted to 145.
#
# Last edited 2/13/2025
#
*******************
* Compute options *
*******************

  The X-data and Y-data drop down menus in the "Data2load" section allows for the ability to set the X-data and Y-data to plot based on the
  column names in the loaded LAMMPS logfile. However it is sometimes desirable to be able to perform further calculations on the column data
  from the LAMMPS logfile. These compute options allows for new X-data and Y-data to be computed prior to plotting and analyzing the X-data
  and the Y-data.
  
  The computes using the column data names from the LAMMPS logfile is setup similar to how you may reference a variable in LAMMPS, where you
  "wrap" the variable in between "${" and "}" characters. For example say you wanted to scale the "Step" data you can put
    ${Steps}*(1/1000)
  in either the X-compute or Y-compute entry. This will inform the code to perform vectorized multiplication for every data point in the Step
  column data, by 1/1000. If the X-data dropdown menu contains a column name and the X-compute entry contains a compute, the compute will be
  used over the X-data column name. Similarly if the Y-data dropdown menu contains a column name and the Y-compute entry contains a compute,
  the compute will be used over the Y-data column name.
  
******************
* Math operators *
******************

  The basic math operators are supported for these vectorized computes. See below for a map of syntax to the math operation:
    The "+" character is used for addition. For example:
      ${Step} + 100

    The "-" character is used for subtraction. For example:
      ${Step} - 100	
  
    The "*" character is used for multiplication. For example:
      ${Step}*100
		
    The "/" character is used for division. For example:
      ${Step}/100
		
    The "**N" character is used to raise something to the power N. For example:
      ${Step}**2
      ${Step}**(1/2)
	  
************
* Indexing *
************

  Indexes in arrays can be accessed by using square brackets and the index number. For example say we wanted
  to compute the intial cross-sectional area, then the compute would be:
    ${Lx}[0]*${Ly}[0]
	
******************************************
* Built-in/NumPy functions and constants *
******************************************

  The compute string can further leverage some Python built-in's and all of the NumPy library for further computing operations. A few examples
  are provided below (NOTE: numpy is aliased as np):

    A linspace can be computed in "pure" NumPy or combining with some Python built-ins:
      np.linspace(np.min(${v_strain}), np.max(${v_strain}), np.size(${v_strain}))
      np.linspace(min(${v_strain}), max(${v_strain}), len(${v_strain}))	  
	  
    An array can be reversed if needed in "pure" NumPy or with Python built-ins:
      np.flip(${v_strain})
      reversed(${v_strain})
      ${v_strain}[::-1]
	  
  All of the NumPy library is accessible, so any code snippet that can be written in NumPy can be executed with the compute options of log_analysis.
  The built-in Python functions are limited to the following, for security and safety reasons:
    - min()
    - max()
    - sum()
    - abs()
    - len()
    - map()
    - range()
    - reversed()
  Please see official NumPY and Python documentation for how to use the functions described above. Additional libraries such as SciPy, Pandas, etc
  can be added to LUNAR/src/log_analysis/vectorized_string_compute.py -> thermo_data() -> locals_dict, however it is advised to leave out libraries
  that can perform OS-level tasks, such as the "os" or "sys" libraries.  
		
************************************
* Examples of some useful computes *
************************************

  Say we want to convert the "Temp" column from Kelvin to Celsius, you can set a compute like:
    ${Temp} - 273.15
	
  Say we want to convert the "Temp" column from Kelvin to Fahrenheit, you can set a compute like:
    (${Temp} - 273.15)*(9/5) + 32
	
  Say we want to convert the "Press" column from atm to PSI, you can set a compute like:
    ${Press}*14.696
	
  Say we want to convert the "Volume" column from angstrom^3 to specific volume, you can set a compute like:
    1/${Volume}
	
  Say we wanted to compute von mises stress from LAMMPS variables, you can set a compute like:
    (((${f_sxx}-${f_syy})**2 + (${f_syy}-${f_szz})**2 + (${f_szz}-${f_sxx})**2 + 6*(${f_sxy}**2 + ${f_syz}**2 + ${f_sxz}**2))/2)**0.5
	
  Say we wanted to convert true stress to engineering stress in the Z-direction, then the compute would be:
    ${f_szz_ave}*(${Lx}*${Ly})/(${Lx}[0]*${Ly}[0])
		


# The "#" character is a comment character, where anything trailing the "#"
# character will be ignored. This file is meant to provide the text to display
# in the popup when pressing the "Quick help" button.
#
# Please note that if editing this file all spaces are created using the space
# bar and not the tab key, since this text is read and directly used Tkinter
# scrollable Text widget, it is important to maintain proper spacing.
# Indentations will use two spaces.
#
# The maximum column position should be restricted to 145.
#
# Last edited 8/15/2024
#
************
* Overview *
************

  LUNAR/log_analysis.py  is meant to provide a general purpose plotting and analysis tool for LAMMPS logfiles. The LAMMPS logfile can be setup
  using the LAMMPS "thermo_style    custom ..." command and can be written to based on the LAMMPS "thermo N" command. LUNAR/log_analysis.py is
  compatible with very complex log files with many sections defined. This code minimally requires the Python numpy and matplotlib packages,
  where pwlf and scipy can enable more methods (see the methods section below).
  
**********
* Inputs *
**********

  Methods that use the "X-lo" and "X-hi" columns
    - "moving avrage"
    - "Butterworth (low pass)"
    - "average"
    - "linear regression"
    - "hyperbola"
    - "piecewise-regression"
    - "spline-integration"
    - "minimum"
    - "maximum"
    - "LAMMPS data (apply moving average)"
    - "LAMMPS data (apply butterworth filter)"
    - all other methods can leave this column empty
    - NOTE: if not provided the GUI will default to using the minimum xdata for xlo and the maximum xdata for xhi

  Methods that use the "Misc settings" column (all keywords are lowercase)
    - "moving average"
        window=<N>, where <N> is the number of data points to group and average together. The default window is 100 and will be applied if
        entry is left empty. Examples:
          window=50  # group 50 data points and average into one data point
          window=75  # group 75 data points and average into one data point
		  
    - "Butterworth (low pass)"
        This method implements a low pass butterworth  filter to attenuate the higher frequency thermal vibrations associated with most MD thermo-
        dynamic data. The goal is the "reveal" a cleaned response of the data being filtered. It is worth researching the butterworth filter prior
        to using this filtering method, however a breif discussion will be provided discussing the keyword inputs implemented for this method.
        This method allows for two settings to be adjusted, the "order" of the filter and the "critical frequency (wn)" of the filter. The "order"
        of the filter sets how "aggressive" the higher frequencies are attenuated near the "cutoff frequency" of the filter. For example see the
        two magnitude responses below for the same "cutoff frequency", the "higher" order filter reduces the "gain" much more aggressively near the
        "cutoff frequency".

          Depicts the magnitude response               Depicts the magnitude response
          of a "lower order" filter		               of a "higher order" filter

          ^                                            ^
         1|..........                                 1|..........
          |          .                                 |         .
          |           .                                |         .
          |            .                               |         .
          |             .                              |         .
          |              ..........                    |         ...........
         0+----------|-------------->                 0+---------|--------------->
            frequency cutoff                             frequency cutoff
					
        wn=<float>, where <float> is a floating point number between 0 and 1 to set critical frequency, which is the point at which the gain drops to
        1/sqrt(2) that of the passband (the "-3 dB point"). If you want to control the "true cutoff frequency" you may compute "wn" in the following
        way:
            wn = cutoff/nf; where "wn" is the input to the filter, "nf" is the Nyquist frequency, and "cutoff" is the cutoff frequency. 
            nf = 0.5*fs; where "fs" is the sampling frequency (1/delta-x).
            wn = cutoff/(0.5*fs)
        The default wn is 0.01, if not supplied. Examples:
          wn=0.1
          wn=0.5
		  
        order=<int>, where <int> is the order of the low pass butterworth filter. See the images above for the effect of the order of the filter.  The
        default order is 2, if not supplied. Examples:
          order=2
          order=3
		  
        NOTE: the "order" and "wn" can be set by stringing them together with the ";" character. For example:
          order=2; wn=0.1
          wn=0.5; order=3
		
        This method requires the Python scipy package (install via: pip install scipy)
                  
    - "linear regression"
        shift=<Boolean>, where <Boolean> is True or False. If shift=True all data that is plotted except the cursor (if plotted) will be shifted
        by the y-intercept of the linear regression. The shifting of data is useful for stress-vs-strain analysis for finding the yield strength,
        since it is advised to shift all data, such that the linear regression starts at zero, to effectively remove the residual stress from the
        yeild strength calculation. The default shift boolean is False and will be applied if entry is left empty. Examples:
          shift=False  # All data will remain as is
          shift=True   # All Y-data will be shifted by the y-intercept of the regression
		  
        extend=<float>, where <float> can be a positive or negative value. When the "extend" option is not used, the linear regression line that
        is plotted will be at the "X-lo" and "X-hi" positions. However, in some cases it maybe desirable to visualize the linear regression line
        beyound the "X-lo" and "X-hi" positions, such as to visualize where two linear regression models intersect (one method to compute Tg from
        either a temperature-vs-density plot or a temperature-vs-volume plot. If the <float> value is postive the "extending portion" will be
        plotted to the right of "X-lo" and "X-hi" positions, and if the <float> value is negative the "extending portion" will be plotted to the
        left of "X-lo" and "X-hi" positions. Additionally, when the extend option is used the data will be plotted as a line, with the three
        points showing the three data points. Examples:	
          extend=100
          extend=-50
          shift=True; extend=25
          extend=-50; shift=False
				 
    - "hyperbola"
        This method implements the hypberbola fit method for computing Tg and CTE from this paper: "Uncertainty quantification in molecular
        dynamics studies of the glass transition temperature - Paul N. Patrone, Andrew Dienstfrey, ... - Polymer Volume 87 - 2016"
	
        p=<float>, where <float> is between 0 and 0.9999 to set the minimum amount of convergence necessary for a dataset to be considered
        acceptable (equation 5 from the paper listed above). When using this method an additional "transition line" will appear on the plot
        to show the transition region of the hyperbola. The paper above uses P=0.9, thus P=0.9 is a good option. If P is not specified, the
        transition region will not be plotted. Examples:
          p=0.9  # Will set the minimum convergence value to 0.9
          p=0.95 # Will set the minimum convergence value to 0.95
		  
        initial_guess=<Boolean>, where <Boolean> is True or False. If initial_guess=False all hyperbola parameters of t0, p0, a, b, c will be
        set to 1 intially and then scipy.optimize.curve_fit() fill determine the fit based on those intial values. If initial_guess=True the
        hyperbola parameters will be intialized as:
          t0 initial guess = mean(x)
          p0 initial guess = mean(y)
          a initial guess = (y[-1]-y[0])/(x[-1]-x[0])
          b initial guess = (y[-1]-y[0])/(x[-1]-x[0])
          c initial guess = log((x[-1]-x[0])**2/100)
        Both p=<float> and initial_guess=<Boolean> can be paired. Examples:
          initial_guess=False        # use default starting values
          initial_guess=True         # guess and use computed starting values	
          p=0.9; initial_guess=True  # guess and use computed starting values and also show convergence
          initial_guess=True; p=0.9	 # guess and use computed starting values and also show convergence	  
		  
        This method requires the Python scipy package (install via: pip install scipy)

    - "spline-integration"
        This method applies a spline integration (interpolation if needed between data points), where calling this method a moving average
        is applied to the LAMMPS data and then a spline integration is applied to the moving average data.
	
        window=<N>, where <N> is the number of data points to group and average together. The default window is 100 and will be applied if
        entry is left empty. Examples:
          window=50  # group 50 data points and average into one data point
          window=75  # group 75 data points and average into one data point
		  
        shift=<Boolean>, where <Boolean> is True or False. If shift=True all data that is plotted except the cursor (if plotted) will be shifted
        by the first data point from the moving average. The shifting of data is useful for stress-vs-strain analysis for finding the yield
        strength, since it is advised to shift all data, such that the linear regression starts at zero, to effectively remove the residual
        stress from the yeild strength calculation. The default shift boolean is False and will be applied if entry is left empty. Examples:
          shift=False  # All data will remain as is
          shift=True   # All Y-data will be shifted by the y-intercept of the regression
		  
        This method requires the Python scipy package (install via: pip install scipy)
		  
    - "piecewise-regression"
        n=<int>, where <int> is the number of break points to use to perform a "piecewise-regression", sometimes termed as a segmented linear
        regression. Examples:
          n=1
          n=2
		
        shift=<Boolean>, where <Boolean> is True or False. If shift=True all data that is plotted except the cursor (if plotted) will be shifted
        by the first datapoint of the piecewise-regression. Examples:
          shift=False
          shift=True

        This method requires the Python pwlf package (install via: pip install pwlf)
		
    - "cursor"
      x=<N>; y=<N>;, where <N> is the X or Y coordinate to place the cursor. If both x and y are not present the cursor will not plot or analyze
      anything. Thus the default if not present is to do nothing. Examples:
        x=10; y=200;  # Will place a cursor at (10, 200) in the plot
        x=50; y=800;  # Will place a cursor at (50, 800) in the plot
		
    - "minimum" and "maxmimum"
        window=<N>, where <N> is the number of data points to group and average together. The default window is 100 and will be applied if
        entry is left empty. Examples:
          window=50  # group 50 data points and average into one data point
          window=75  # group 75 data points and average into one data point
        After the moving average is applied the minimum or maximum Y-value on the moving average data will found and reported.

    - "LAMMPS data (apply moving average)" or "LAMMPS data (apply butterworth filter)"
        Can be used as a "global" method to clean the LAMMPS data before analyzing. The "LAMMPS data (apply moving average)" option means apply a 
        moving average to the LAMMPS data before analyzing. This can be useful to reduce the "noise" in logged thermodynamic data. Please see the
        "moving average" section for options to use in the "misc" column to define the operations of this method on the LAMMPS data. The default
        "X-lo" and "X-hi" will be the minimum and maximum of the X-data if left blank and the default window will be 100 data points of left
        blank.
      
        The "LAMMPS data (apply butterworth filter)" option means apply a low pass butterworth filter to the LAMMPS data before analyzing. This
        can be useful to reduce the "noise" in logged thermodynamic data. Please see the "Butterworth (low pass)" section for options to use in
        the "misc" column to define the operations of this method on the LAMMPS data. The default "X-lo" and "X-hi" will be the minimum and maximum
        of the X-data if left blank. The default "wn" will be 0.01 and "order" will be 2 if left blanks.
	  
        NOTE only one instance of "LAMMPS data (apply moving average)" or "LAMMPS data (apply butterworth filter)" can be used at a time (not both
        at once). Additionally even when using either LAMMPS data method, the raw LAMMPS data will still be plotted. To remove the raw LAMMPS data
        from the plot while using either of these options use the "LAMMPS data (remove from plot)" option.

  All methods will use "Name" column, however if left empty the code will create the name as analysis-<N>, where <N> is the index of the analysis
  in the GUI.   

  If analysis stack has empty entries in the "X-lo" or "X-hi" columns and they are required to perform the analysis, the code will skip the
  analysis and not plot any data. 

*****************************************************************************
* Please see the "Code: log_analysis.py" chapter in the official manual     *
* found in the LUNAR/docs folder for further details.                       *
*****************************************************************************
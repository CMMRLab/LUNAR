# The "#" character is a comment character, where anything trailing the "#"
# character will be ignored. This file is meant to provide the text to display
# in the popup when pressing the "Quick help" button.
#
# Please note that if editing this file all spaces are created using the space
# bar and not the tab key, since this text is read and directly used Tkinter
# scrollable Text widget, it is important to maintain proper spacing.
# Indentations will use two spaces.
#
# The maximum column position should be restricted to 145.
#
# Last edited 9/21/2024
#
************
* Overview *
************

  LUNAR/sheet_builder.py is meant to build sheets or tubes of sp2 hybridized atoms. The outputs are meant to be passed onto LUNAR/all2lmp.py
  to build a fully parameterized LAMMPS datafile or if find_bonds = False, the LUNAR/sheet_builder.py outputted LAMMPS datafile can directly
  be used for a ReaxFF simulation in LAMMPS.

*****************
* Global Inputs *
*****************
            
  parent_directory
    Button to load in a path to the directory where the outputs will be written to. You may also directly type the path in the entry to the 
    right of the button as well. The path can be a full path or relative path or be set to the . (dot character) to write files to the
    location where sheet_builder.py is currently being run from.
	
  type1 and type2 and type3 and type4
    Drop down menu to supply a string that will assign an atom type or element in a specfic location of the ring. This will allow users to control the
    "pattern" of atoms for generating sheets or tubes that contain multiple atom types or elements (for example in Boron-Nitride sheets or
    tubes). The "base unit" that is replicated to generate the sheets or tubes is describe in the figure below:

       type2___type3    replicated   2___3    2___3    types = {1:'B', 2:'N', 3:'B', 4:'N'}   N___B    N___B    
           /   \        --------->  1/   \4__1/   \4   ------------------------------------> B/   \N__B/   \N   
      type1     type4                \___/    \___/    |                                      \___/    \___/    
                                     2   3    2   3    |                                      N   B    N   B    
                                                       |                                                         
                                                       |types = {1:'B', 2:'N', 3:'N', 4:'B'}   N___N    N___N   
                                                       +------------------------------------> B/   \B__B/   \B  
                                                       |                                       \___/    \___/   
                                                       |                                       N   N    N   N   
                                                       |                                                         
                                                       |types = {1:'N', 2:'B', 3:'B', 4:'N'}   B___B    B___B   
                                                       +------------------------------------> N/   \N__N/   \N  
                                                       |                                       \___/    \___/   
                                                       |                                       B   B    B   B   
                                                       |                                                         
                                                       |types = {1:'C', 2:'C', 3:'C', 4:'C'}   C___C    C___C   
                                                       +------------------------------------> C/   \C__C/   \C  
                                                                                               \___/    \___/   
                                                                                               C   C    C   C   
    
    The drop down menu will set the atom type or element to repeat in the "pattern". Note that if you would like to generate a sheet or tube
    with different atom types or elements then are currently in the drop down menu, you may do so by deleting the entry (or selecting the blank
    entry) and typing the specifc atom type or element combination in manually). An .nta file will be written such that the outputs of this code
    can be read into LUNAR/all2lmp.py to assign a specifc force field to the atomic positions generated. Thus the strings in the Drop down menu 
    should be set to the force field specfic atom types that you plan to apply using LUNAR/all2lmp.py. Here are a few examples for different force
    fields for a carbon system:                                                                          
      PCFF     -> types = {1:'cp',  2:'cp',  3:'cp',  4:'cp'}                                                 
      PCFF-IFF -> types = {1:'cg1', 2:'cg1', 3:'cg1', 4:'cg1'}                                                
      DREIDING -> types = {1:'C_R', 2:'C_R', 3:'C_R', 4:'C_R'}                                                
      ReaxFF   -> types = {1:'C',   2:'C',   3:'C',   4:'C'}                                                  
    NOTE: that when generating inputs to ReaxFF that you set the actually element symbol and not classical force field atom types. Also note that
    when generating inputs to ReaxFF, you should set find_bonds as False which will allow you to directly take the output LAMMPS datafile of this
    code and run in a LAMMPS ReaxFF simulation.   

    Additionaly IFF's pi-electrons can be added to a system by setting each type as 'atomtype|pi-electron' where the '|' character seperates the
    atomtype from the pi-electron type. For example:                     
                                                                                                            
        types = {1:'cg1|cge', 2:'cg1|cge', 3:'cg1|cge', 4:'cg1|cge'} will generate:                            
                                                         cge cge  cge cge                                       
             2___3    2___3            cg1___cg1          |   |    |   |                                        
            1/   \4__1/   \4   --->   cg1/   \cg1   ---> cg1-cg1--cg1-cg1                                        
             \___/    \___/              \___/            |   |    |   |                                        
             2   3    2   3            cg1   cg1         cge cge  cge cge                                       
                                                                                                            
        types = {1:'bbn|bbe', 2:'nbn|nbe', 3:'bbn|bbe', 4:'nbn|nbe'} will generate:                            
                                                         bbe nbe  bbe nbe                                       
             2___3    2___3            nbn___bbn          |   |    |   |                                        
            1/   \4__1/   \4   --->   bbn/   \nbn   ---> bbn-nbn--bbn-nbn                                        
             \___/    \___/              \___/            |   |    |   |                                        
             2   3    2   3            nbn   bbn         bbe nbe  bbe nbe  
    
    Final note, is that in the "sheet_builder.py" file, there is a charge dictionary, which is used to store the charge for each atom type that
    may appear in the type1 - type4 drop down menus. Thus the only way to adjust charge is to open the "sheet_builder.py" file and manually
    adjust the charge dictionary.	                                        	
	
  bond_length
    An entry to control the in-plane spacing of atoms when generating sheets or tubes based on the bond length between atoms. The bond length is
    supplied in units of Angstroms (usually around 1.42 A).
	
  find_bonds
     A drop-down menu to select the Boolean to control whether or not to find bonds based on interatomic distance searching. If find_bonds is
     True, bonds will be found via interatomic distance searching and bonds will be written in the output LAMMPS datafile. If find_bonds is False
     no bonds will be found and no bonds will be written in the output LAMMPS datafile. When finding bonds the bonds can be set to be periodic or
     non-periodic, see the periodic_bonds flag. NOTE find_bonds must be True to generate an outputted .nta file.
	 
  periodic_bonds
     A drop-down menu to select the Boolean to control whether bonds will pass through the periodic boundary or not. If the Boolean is True, when
     bonds are determined via interatomic distances, bonds will be found that pass through a periodic boundary. If the Boolean is False no
     periodic bonds will be found.
	 
	 
*********************************************************************************************
* Options for adding different atoms to sheets and tubes (terminating or functionalization) *
*********************************************************************************************

  sheet_builder allows for adding additional atom(s) to the sheet or tubes for two different scenarios, such as terminating atoms of a sheet or
  tube if the bonds are not set to be periodic or adding functional groups to the sheets or tubes. The terminating atoms will be orientated
  along the plane of a sheet or the axis of the tube and the functional groups will be orientated orthagonal to the sheet or tube surface.
  
  functional_atoms
    An entry to supply a string to set how functional atoms are added to the sheet or tube and what the functional group is. The string format
    is as follows:
      BondingType<MaxPercent>|Type1|Type2|TypeN, where "BondingType" is the atom type to add the function group to, "MaxPercent" is a float or
      integer type to set the maximum percent of atoms to functionalize, the "|" character seperates types, and the "TypeN" sets the atom to add.
	  
      For example say types = {1:'C', 2:'C', 3:'C', 4:'C'} to generate a carbon sheet or nanotube and the goal was to functionalize 5% of the
      carbon atoms with -OH functional group. Then the functional_atoms string would be 'C<5>|O|H', which would randomly add the -OH functional
      group to 5% of the C atoms.
	  
      Additionaly the functional_atoms string can handle multiple BondingType's by seperating them with the ";" character. So the generalized
      functional_atoms string becomes:
        BondingTypeA<MaxPercentA>|TypeA1|TypeAN; BondingTypeB<MaxPercentB>|TypeB1|TypeBN; BondingTypeC<MaxPercentC>|TypeC1|TypeCN; ...
      
        For example say types = {1:'B', 2:'N', 3:'B', 4:'N'} to generate a Boron-Nitride sheet or tube with alternating B/N atoms and the 
        goal was to functionalize 10% of the Boron atoms with -OH functional group and to functionalize 20% of the Nitride atoms with -H
        functional group. Then the functional_atoms string would be 'B<10>|O|H; N<20>|H', which would randomly add the -OH functional group to
        10% of the B atoms and add the -H functional group to 20% of the N atoms.
		
      All examples above will place the atoms in a line along the orthagonal direction from the surface of tube, but say we wanted to added a
      functional group that resembles an epoxide ring (3 member ring with two carbons and 1 oxygen). Then we can add a "|" character to the end
      of the functional_atoms string. This method currently only works for adding a single atom functional group like oxygen to the sheets or
      tubes.
	    
        For example say types = {1:'C', 2:'C', 3:'C', 4:'C'} to generate a carbon sheet or nanotube and the goal was to functionalize 30% of the
        carbon atoms with the epoxide ring oxygen. Then the functional_atoms string would be 'C<30>|O|', where the last character is the "|"
        character. This will tell the code to find a first neighbor from the random atom and center the oxygen atom between the first neighbor
        and itself. Finally, add two bonds to create the epoxide type ring. Note that each time the oxygen atom is added, it functionalizes two 
        carbon atoms at a time. So say the sheet or tube had 100 carbon atoms and the functionalization MaxPercent was set to 30%, then only 15
        oxygen atoms will be added (not 30).
		
    If the functional_atoms entry/string is left blank, this option will not be envoked. Additionally, this option requires find_bonds to be True.

  functional_seed
    An entry to supply a seed to the random number generate to define the random atoms the functional groups will be added to. If the seed value
    is set to ZERO, the current system time from your computer is used to provide a seed to the random number generator.
	
  terminating_atoms
    An entry to supply a string to set how terminating atoms are added to the sheet or tube and what the termanting atoms are. This option requires
    that periodic_bonds is False, as this creates open valences on the "end" atoms of the sheet or tube. The string format
    is as follows:
      BondingType|Type1|Type2|TypeN, where "BondingType" is the atom type to add the terminating atoms to, the "|" character seperates types, and
      the "TypeN" sets the atom to add.
	  
      For example say types = {1:'C', 2:'C', 3:'C', 4:'C'} to generate a carbon sheet or nanotube that is not periodically bonded and the goal was
      to terminate the open valences on the "edges" of the sheet or tube with the -OH functional group. Then the termanting_atoms string would be
      'C|O|H', which would terminate all "edge" atoms with the -OH group.
	  
      Additionaly the terminating_atoms string can handle multiple BondingType's by seperating them with the ";" character. So the generalized
      termanting_atoms string becomes:
        BondingTypeA|TypeA1|TypeAN; BondingTypeB|TypeB1|TypeBN; BondingTypeC|TypeC1|TypeCN; ...
		
        For example say types = {1:'B', 2:'N', 3:'B', 4:'N'} to generate a Boron-Nitride sheet or tube with alternating B/N atoms that was not 
        periodically bonded and the goal was to termanate the Boron atoms with -H and to termanate the Nitride atoms with -OH, then the 
        terminating_atoms string would be 'B|H; N|O|H', which would termanate the "edge" Boron atoms with an -H and the "edge" Nitride atoms with
        a -OH group.
		
    If the terminating_atoms entry/string is left blank, this option will not be envoked. Additionally, this option requires find_bonds to be True.
	
  Final thoughts on the terminating_atoms and functional_atoms strings. The string "syntax" uses the "|" character as some force field atom types
  will have the "-" character in the type. In order to generate a robust parser for these strings and to allow for the possibility of using force
  field atom types that have the "-" character, it was decided to use the "|" character as the delimiter. 
	 
	 
***************
* Sheets mode *
***************

  basename
	An entry to set output basename of outputs for when running in 'sheet' mode.
	
  edge length and perpendicular length
    Entries to control the size of the sheet. The "edge length" will set the length in the edge type direction set by the "edge type" entry and
    the "perpendicular length" entry sets the perpendicular length from the edge type. The units are in Angstroms. Here is the meaning of "edge
    length" and "perpendicular length" for different "plane" and "edge type" entries:
      "plane" = 'xy' and "edge type" = 'zigzag'                                                             
        "perpendicular length" is length in X-direction                                                    
        "edge length" is length in Y-direction                                                           
                                                                                                            
      "plane" = 'xz' and "edge type" = 'zigzag'                                                             
        "perpendicular length" is length in X-direction                                                    
        "edge length" is length in Z-direction                                                           
                                                                                                            
      "plane" = 'yz' and "edge type" = 'zigzag'                                                             
        "perpendicular length" is length in Y-direction                                                    
        "edge length" is length in Z-direction                                                           
                                                                                                            
      "plane" = 'xy' and "edge type" = 'armchair'                                                           
        "perpendicular length" is length in Y-direction                                                    
        "edge length" is length in X-direction                                                           
                                                                                                            
      "plane" = 'xz' and "edge type" = 'armchair'                                                           
        "perpendicular length" is length in X-direction                                                    
        "edge length" is length in Z-direction                                                           
                                                                                                            
      "plane" = 'yz' and "edge type" = 'armchair'                                                           
        "perpendicular length" is length in Z-direction                                                    
        "edge length" is length in Y-direction  	
		
  layer spacing
    An entry to control the out-of-plane spacing of atoms when multiple layers are added. The layer spacing is supplied in units of Angstroms
    (usually around 3.354 A).
	
  nlayers
    An entry to control the number of layers to generated. All models will be centered about (0, 0, 0) no matter the number of layers generated.
	
  edge type
    A drop-down menu to set the edge type of the sheet. The available edge types are:
      'armchair' which will generate a sheet in the armchair directions, with the length in the armchair     
                 direction set by the "edge length" entry.                                           
      'zigzag'   which will generate a sheet in the zigzag directions, with the length in the zigzag         
                 direction set by the "edge length" entry.  
				 
  stacking
    A drop-down menu to set how sheets are stacked if "nlayers" is greater than one. The following stacking sequences are available:
      'AA'
      'AB'
      'ABC'
    where the schematic below shows AA, AB, and ABC stacking for six sheets:
      AA-stacking        AB-stacking        ABC-stacking                                                    
      ___________        ___________        ___________                                                     
      ___________           ___________         ___________                                                 
      ___________        ___________                ___________                                             
      ___________           ___________     ___________                                                     
      ___________        ___________            ___________                                                 
      ___________           ___________             ___________  
    
    The "shift" in AB- and ABC-stacking is the "bond_length". Also note for AB- and ABC-stacking, the simulation cell will be set by the
    "top layer" and the rest of the layers will be wrapped to fit within a periodic simulation cell.
	
  plane
    A drop-down menu to set the plane to generate the sheet on.
	
  Run LUNAR/sheet_builder.py in 'sheet' mode
    A button to run sheet_builder.py to in 'sheet' mode to generate sheets, using all settings defined in the GUI.
  
************************
* Symmetric tubes mode *
************************

  basename
	An entry to set output basename of outputs for when running in 'symmetric-tube' mode.
	
  tube length and tube diameter
    Entries to control the size of the tube. The "tube length" entry controls the length of the tube in the axial direction and "tube diameter"
    controls the diameter of the tube.
	
  layer spacing
    An entry to control the out-of-plane spacing of atoms when multiple tubes are added (i.e. when ntubes is greater then 1). The layer spacing
    is supplied in units of Angstroms (usually around 3.354 A).
	
  ntubes
    An entry to control the number of tubes to generate. All models will be centered about (0, 0, 0) no matter the number of tubes generated.
    When ntubes is greater then 1, the "diameter" entry will control the inner most tube diameter and the N-outer layer tube diameters will be
    controlled by the "ntubes" and "layer spacing" entries.
	
  edge type
    A drop-down menu to set the edge type of the tube. The available edge types are:
      'armchair' which will generate a tube with the "circumference" being in the armchair direction         
      'zigzag'   which will generate a tube with the "circumference" being in the zigzag direction 

  axis	
    A drop-down menu to set which axis the tube axis is aligned with. 
	
*********************
* Chiral tubes mode *
*********************

  basename
    An entry to set output basename of outputs for when running in 'chiral-tube' mode.
	
  tube length
    An entry to control the length of a chiral tube. NOTE the chiral indices "m" and "n" control the "base-tube" length where the "tube length"
    sets the desired length of a chiral tube, where the "base-tube" will be replicated enough times to get a tube close in length to "tube
    length".
	
  n and m
    Entries to control the chiral indices of n and m. All physical properties of a chiral single wall tube depend on the chiral indices.
    Symmetric tubes can be generated when:
      m = n, which generates an armchair tube                                                                 
      m = 0, which generates a zigzag tube   
    If it is desired to create armchair or zigzag tubes this code can be ran in mode = 'symmetric-tube', which provides easier control over the
    tube length and diameter. The 'symmetric-tube' mode also allows multiwall nanotubes to be generated with easy. Thus it is recommend only to
    use the 'chiral-tube' mode if you want to generate a chiral tube and use the 'symmetric-tube' to generate tubes in either armchair or zigzag      
    configurations.	  

***********
* Buttons *
***********
	
  Save the current GUI settings as the default GUI settings
    A button to update variables in sheet_builder.py file. Each time the GUI is launched all GUI settings are loaded from the
    sheet_builder.py file. Thus this button creates a method to update the sheet_builder.py file. The CLI also initializes its
    defaults from the variables in the sheet_builder.py, so this button updates the defaults for that run mode as well. Finally,
    running sheet_builder.py from an IDE, the defaults for IDE usage are also set by the variables in the sheet_builder.py file,
    thus this button will also update the defaults for IDE usage.
    
  Quick help
    A button to create a popup for quick help and guidance.

#*****************************************************************************
#* Please see the "Code: sheet_builder.py" chapter in the official manual    *
#* found in the LUNAR/docs folder for further details.                       *
#*****************************************************************************